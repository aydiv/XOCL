package com.x.pim.v1 
{
	import com.x.pim.v1.*
	
    entity Product
    entity StockKeepingUnit

    
 	transaction SearchProduct query
    {
    	description "Retrieve details for one or more products based on locale."
        sender
        {
        	message SearchProduct
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	
        	// A success message does not have a response timeout
        	success SearchProductSucceeded            
                    	
        	// A failure message does not have a response timeout
            failure SearchProductFailed
        } 
    }
    
    transaction LookupProduct query
    {
    	description "Retrieve details for one or more products based on SKU values."
        sender
        {
        	message LookupProduct
        	{
        		timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response

			// A success message does not have a response timeout
        	success LookupProductSucceeded
            
			// A failure message does not have a response timeout
            failure LookupProductFailed
        } 
    }
    
    transaction ProductCreated inform
    {
    	description "The product information manager informs an observer that a product was created."
        sender
        {
        	message ProductCreated
        }
    }
    
    transaction ProductUpdated inform
    {
    	description "The product information manager informs an observer that a product was updated."
        sender
        {
        	message ProductUpdated
        }
    }
    
    transaction ProductDeleted inform
    {
    	description "The product information manager informs an observer that a product was deleted."
        sender
        {
        	message ProductDeleted
        }
    }
    
    
    transaction UpdateProduct response
    {
    	description "A consumer asks the product information manager to update one or more products. This transaction is not specified in any contract at this time."
        sender
        {
        	message UpdateProduct
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success UpdateProductSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateProductFailed{
            	timeouts(receipt=30s)
            }

        }
    }
    
    transaction CreateProduct response
    {
    	description "A consumer asks the product information manager to create one or more products. This transaction is not specified in any contract at this time."
        sender
        {
        	message CreateProduct
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success CreateProductSucceeded
        	 {       
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure CreateProductFailed{
            	timeouts(receipt=30s)
            }
        }
    }

    transaction DeleteProduct response
    {
    	description "A consumer asks the product information manager to delete one or more products. This transaction is not specified in any contract at this time."
        sender
        {
        	message DeleteProduct
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success DeleteProductSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure DeleteProductFailed{
            	timeouts(receipt=30s)
            }
        }
    }
    
        
    transaction UpdateSKU (StockKeepingUnit sku)response
    {
     	description "A consumer asks the product information manager to update one or more product SKUs. This transaction is not specified in any contract at this time."
    	preconditions
    	{
    		exists(sku) "A pre-condition to updating a product SKU is that the SKU already exists (i.e., the merchant has already generated an SKU)."
    	}
        sender
        {
        	message UpdateSKU
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success UpdateSKUSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateSKUFailed{
            	timeouts(receipt=30s)
            }
        }
    }
    
    transaction CreateSKU (StockKeepingUnit sku) response
    {
    	description "A consumer asks the product information manager to create one or more product SKUs. This transaction is not specified in any contract at this time."
        preconditions
        {
        	!exists(sku) "A pre-condition to performing this transaction is that the SKU to be created does not already exist (i.e., the merchant has not already generated an SKU)."
        }
        sender
        {
        	message CreateSKU
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success CreateSKUSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure CreateSKUFailed{
            	timeouts(receipt=30s)
            }
		}
    }

    transaction DeleteSKU (StockKeepingUnit sku) response
    {
    	description "A consumer asks the product information manager to delete one or more product SKUs. This transaction is not specified in any contract at this time."
        preconditions
        {
        	exists(sku) "A pre-condition to performing this transaction is that the SKU to be delete must already exist (i.e., the merchant has already generated the SKU)."
        }
        sender
        {
        	message DeleteSKU
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success DeleteSKUSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure DeleteSKUFailed{
            	timeouts(receipt=30s)
            }
        }
    }   
    
}