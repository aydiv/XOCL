 
package com.x.marketplace.v3{
	import com.x.marketplace.v3.*
	
	entity PolicyGroup
    	
 	entity Offer {
    	state Created[Active]
    	state Active[Inactive]	
    	state Inactive
    }
	
    transaction GetAllAuthorizedAccount query {
        sender {
        	message GetAllAuthorizedAccount	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver {
        	success GetAllAuthorizedAccountSucceeded
        	failure GetAllAuthorizedAccountFailed          
        } 
    }
    
    transaction RevokeAuthorization response {
        sender {
        	message RevokeAuthorization {
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        }
        receiver {
        	success RevokeAuthorizationSucceeded {
            	timeouts(receipt=30s)
            	retries=3
            }
            
            failure RevokeAuthorizationFailed {
            	timeouts(receipt=30s)
            	retries=3
            }
        }
    }
    
    transaction GetAllAvailableChannels broadcast query {
        sender {
        	message GetAllAvailableChannels {
        		 timeouts(response=30s)
        		 //In a broadcast query, the client should wait for the entire timeout before assuming all available channels have responded     		
        	}
        }
        receiver {
        	success GetAllAvailableChannelsSucceeded                 	
        	//No failure message in this case.  If the reciever cannot give channel/provider information, it should not return anything.  
        } 
    }
    
 	transaction GetAllSites query {
        sender {
        	message GetAllSites {
        		 timeouts(response=30s)     		
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success GetAllSitesSucceeded           
                    	
        	// A failure message does not have a response timeout
            failure GetAllSitesFailed
        } 
    }
    
 	transaction LookupSiteMetadata query {
        sender {
        	message LookupSiteMetadata {
        		 timeouts(response=30s)     		
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success LookupSiteMetadataSucceeded   
        	
        	// A failure message does not have a response timeout
            failure LookupSiteMetadataFailed
        } 
    }
    
    
   
    transaction SearchCategories query {
        sender {
        	message SearchCategories {
        		 timeouts(response=30s)     		
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success SearchCategoriesSucceeded         
                    	
        	// A failure message does not have a response timeout
            failure SearchCategoriesFailed
        } 
    }
    
    transaction CreatePolicyGroup<Ebay> response {
        sender {
        	message CreatePolicyGroup {
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message <Ebay> CreateEbayPolicyGroup {
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response
        	success CreatePolicyGroupSucceeded {
        		 timeouts(receipt=30s)     		
        	}

            success <Ebay>CreateEbayPolicyGroupSucceeded {
      			 timeouts(receipt=30s)      		
        	}
            
            failure CreatePolicyGroupFailed {
        		 timeouts(receipt=30s)       		
        	}

            failure <Ebay>CreateEbayPolicyGroupFailed {
        		 timeouts(receipt=30s)       		
        	}
        }
    }
    
    transaction UpdatePolicyGroup<Ebay> response {
        sender {
        	message UpdatePolicyGroup{
        	    timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}

            message <Ebay>UpdateEbayPolicyGroup{
        	    timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}

        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response
        	success UpdatePolicyGroupSucceeded{
        		timeouts(receipt=30s)
        	}
            success<Ebay> UpdateEbayPolicyGroupSucceeded{
        		timeouts(receipt=30s)
        	}
            
            failure UpdatePolicyGroupFailed{
        		timeouts(receipt=30s)
        	}
            failure <Ebay>UpdateEbayPolicyGroupFailed{
        		timeouts(receipt=30s)
        	}

        }
    }
    
    transaction DeletePolicyGroup response {
        sender {
        	message DeletePolicyGroup {
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response
        	success DeletePolicyGroupSucceeded{
        		timeouts(receipt=30s)
        	}
          
            failure DeletePolicyGroupFailed{
        		timeouts(receipt=30s)
        	}
        }
    }
     
    transaction LookupPolicyGroup<Ebay> query {
        sender {
        	message LookupPolicyGroup {
        		 timeouts(response=30s)     		
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success LookupPolicyGroupSucceeded{
        		timeouts(receipt=30s)
        	}
        	success <Ebay> LookupEbayPolicyGroupSucceeded{
        		timeouts(receipt=30s)
        	}
        	                   	
                    	
        	// A failure message does not have a response timeout
            failure LookupPolicyGroupFailed{
        		timeouts(receipt=30s)
        	}
            
        } 
    }
 
    
    transaction PublishOffer<Ebay>(Offer offer) notify {
        preconditions(offer[Offer.Created])
        sender {
        	message PublishOfferSucceeded {
        		timeouts(receipt=30s)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message <Ebay> PublishEbayOfferSucceeded {
        		timeouts(receipt=30s)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
    }
    
    transaction PublishOfferSucceeded<Ebay>(Offer offer) notify {
        preconditions(offer[Offer.Active])
        sender {
        	message PublishOfferSucceeded {
        		timeouts(receipt=30s)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message <Ebay> PublishEbayOfferSucceeded {
        		timeouts(receipt=30s)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
    }
    
    transaction PublishOfferFailed<Ebay>(Offer offer) notify {
        preconditions(!offer[Offer.Active])
        sender {
        	message PublishOfferFailed {
        		timeouts(receipt=30s)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message <Ebay> PublishEbayOfferFailed {
        		timeouts(receipt=30s)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
    }
    
    transaction RevisePublishedOffer<Ebay> response {
        sender {
        	message RevisePublishedOffer {
        		timeouts(receipt=30s, response=2h)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message<Ebay> RevisePublishedEbayOffer {
        		timeouts(receipt=30s, response=2h)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response
        	success RevisePublishedOfferSucceeded {
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            success <Ebay> ReviseEbayPublishedOfferSucceeded {
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure RevisePublishedOfferFailed{
            	timeouts(receipt=30s)
            }

            failure <Ebay> ReviseEbayPublishedOfferFailed{
            	timeouts(receipt=30s)
            }
        }
    }
       
    transaction RevisePublishedOffer<Ebay> notify {
        sender {
        	message RevisePublishedOffer {
        		timeouts(receipt=30s)		
        		retries=3
        	}
        	message<Ebay> RevisePublishedEbayOffer {
        		timeouts(receipt=30s)   		
        		retries=3
        	}
        }
      }
      
             
    transaction RevisePublishedOfferSucceeded<Ebay> notify {
        sender {
        	message RevisePublishedOfferSucceeded {
        		timeouts(receipt=30s)		
        		retries=3
        	}
        	message<Ebay> ReviseEbayPublishedOfferSucceeded {
        		timeouts(receipt=30s)   		
        		retries=3
        	}
        }
      }
      
      transaction RevisePublishedOfferFailed<Ebay> notify {
        sender {
        	message RevisePublishedOfferFailed {
        		timeouts(receipt=30s)		
        		retries=3
        	}
        	message<Ebay> ReviseEbayPublishedOfferFailed {
        		timeouts(receipt=30s)   		
        		retries=3
        	}
        }
      }
    
    transaction OfferDeactivated(Offer offer) notify {
    	preconditions(offer[Offer.Inactive])
        sender {
        	message OfferDeactivated {
        		timeouts(receipt=30s)   
        	}
        }
    }
            
    transaction RevokePublishedOffer response {
        sender {
        	message RevokePublishedOffer {
        		timeouts(receipt=30s, response=2h)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response
        	success RevokePublishedOfferSucceeded{
        		timeouts(receipt=30s)
        	}
    
            failure RevokePublishedOfferFailed{
            	timeouts(receipt=30s)
            }
        }
    }
    
    transaction SearchOffers<Ebay> query {
        sender {
        	message SearchOffers {
        		 timeouts(response=30s)     		
        	}
        }
        receiver {
        	// One of these two messages must be sent back to the sender as a response	 
        	success SearchOffersSucceeded
        	success<Ebay> SearchEbayOffersSucceeded            	        
                    	
        	// A failure message does not have a response timeout
            failure SearchOffersFailed
        } 
    } 
}