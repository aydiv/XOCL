package com.x.marketplace.v3{

	import com.x.core.v1.*
	import com.x.pim.v1.*
	/*
		Defines a marketplace account which is intended to be used for all supported marketplaces.
	*/
	record MarketplaceAccount {
		string? xId ;   // ID provided by X.commerce
		string? userMarketplaceId ;
		string? siteCode ;
		string? environmentName ;
		long? authorizationExpiration ;
	}

    record CustomCategory {
		long id;
		string name;
		int order;
		array<CustomCategory> childCategories;
	}
	
	record MarketplaceStore {
		string name;
	    array<CustomCategory>? categories;
	}

    record SiteMetadata extends Site {	
		array<SupportedHandlingTime>? handlingTimes;
		SupportedReturnPolicy? policy;
		array<SupportedShippingService>? services;
	    /** ISO 4217 3-letter currency codes */
		array<string> currencies;
		array<PaymentMethod> methods;
		array<SupportedCountry> countries;
		string marketplace;
		CalculatedShippingMetadata? calculatedShippingMetadata;
	}
	enum MeasurementSystem{
		METRIC "Measurements are in english units: lb, oz, in, etc",
		ENGLISH "Measurements are in metric units: kg, g, cm, etc"
	}
	
	
	record CalculatedShippingMetadata{
		array<string> supportedPackageTypes "The package types supported by this site"
		boolean calculatedShippingSupported "Does this site support calculated shipping?"
		MeasurementSystem measurementSystem "The measurement system used by this site"
	}
	
	 /*
		An environment represents a sub-section of the marketplace/site.
		The environment often defines the destination urls, credentails, etc for
		communicating with a given marketplace (ie 'production', 'sandbox', etc)
	*/
	 record Environment {
		string name;
	 }
	 
	 record SupportedCountry {
		string countryCode;
		string _AVDL_description;
	}
	
   record Site {	
		/** Depending on the channel, this can be 2-character country code from ISO 3166 */
		string siteCode;
		string siteName;
	}
	
	enum RefundMethod {
		MONEY_BACK,
		EXCHANGE_ONLY,
		STORE_CREDIT
	}
	
    record SupportedReturnPolicy {
		boolean returnsAccepted;
		array<RefundMethod> method;
		int maxReturnByDays;
	}
    
    enum ShippingLocaleType {
		DOMESTIC,
		INTERNATIONAL
	}

	enum ShippingRateType {
		FLAT,
		CALCULATED,
		FREIGHT
	}
	
	
	record SupportedShippingService {
		string _AVDL_description;
		string? carrier; //USPS
		string serviceName; //i.e. USPSPriorityFlatRateBox
		int shippingTimeMaxInDays;
		int shippingTimeMinInDays;
		ShippingRateType? rateType;
		ShippingLocaleType localeType;  // Domestic or international
		
		boolean dimensionsRequired;
		boolean weightRequired;
		boolean surchargeApplicable;
	}
	
	record SupportedHandlingTime {
		int maxHandlingTime;  // in days
		string _AVDL_description;
	}
	
    enum OfferState
	{
		NEW, //has not been published to the channel
		PUBLISHED, //published to the channel
		SUSPENDED //removed from the channel
	}

	
	/* Offer includes the channel-assigned state */
	record Offer {
		OfferChannelData channelData;
		OfferDetails offerDetails;	
	}
	
	
	record OfferChannelData{
		/** State of the offer */
		OfferState offerState;
	    string channelAssignedOfferId; //To be provided by channel provider
		string? channelOfferUrl; //To be provided by channel provider
		string? channelStatus; //To be provided by channel provider	
	}
	
	record Category {
		string id;
		string name;
		string? parentId;
		boolean? catalogEnabled;
		int? categoryLevel;
		boolean? leafCategory;
		string? categoryUrl;
	}
	
	record ReturnPolicy {
		string? _AVDL_description;
		boolean? returnAccepted;
		boolean? buyerPaysReturnShipping;
		int? returnByDays;
		RefundMethod? refundMethod;
	}
	
    record ShippingServiceOption {
		int sellerPriority;
		string serviceName;
		CurrencyAmount cost;
		CurrencyAmount? discountAmount;
		CurrencyAmount? additionalCost;
		CurrencyAmount? packagingHandlingCost;
		CurrencyAmount? surcharge ;  // UPS or FedEx to Alaska, Hawaii or Puerto Rico only.
		array<string>? shipToLocations;  // International shipping only
		array<string>? excludeShipToLocations;
	}

	/** Grouping of ShippingServiceOption by locale (domestic/international) and rate type. */
	record ShippingServiceOptionGroup {
		ShippingRateType rateType;  // Flat, calculated, etc
		ShippingLocaleType localeType;  // Domestic or international
		boolean applyPromotionalShippingRule;
		array<ShippingServiceOption> shippingServiceOptions;
	}
		/**
	 * Use this during profile creation or offer to indicate the type of shipping
	 * available for your offer.
	 */
	record ShippingPolicy {
		array<ShippingServiceOptionGroup> optionGroups;  // Domestic and/or international shipping
	}

	record PaymentPolicy {
		array<PaymentMethod>? acceptedPaymentTypes;
		boolean? immediatePaymentRequired;
		string? paymentInstructions;
	}

	record PolicyGroup extends PolicyGroupData{
        string id; //ID generated by the providing capability
	}


	record PolicyGroupData {
		string name; //Unique identifier to the tenant

		//Site the item should be listed to.  In most cases, this will be the ISO country code.
		string? siteCode;
		
		PaymentPolicy? paymentPolicy;
		ShippingPolicy? shippingPolicy;
		ReturnPolicy? returnPolicy;
		string xAccountId;
	}

	record CancelOfferError {
		string offerId;
		array<Error> errors;
	}

	record GetAllAuthorizedAccount {
	}

	record GetAllAuthorizedAccountSucceeded {
		array<MarketplaceAccount> accounts;
	}
	
	record GetAllAuthorizedAccountFailed {
		array<Error> errors;
	}
	
	record RevokeAuthorization {
		string xAccountId;
	}

	record RevokeAuthorizationSucceeded {
		string xAccountId;
	}
	
	record RevokeAuthorizationFailed {
		string xAccountId;
		array<Error> errors;
	}

    record Sku  {
    	/** Identifier of the SKU that is being offered */
		string sku;
		CurrencyAmount price;
		int quantity;
	}
	
	
	record OfferDetailsWithProductData  {
		   OfferDetails offerDetails;
	       Product product;
	}
	
	record OfferDetails  {
        /** The ID in the system that creates the offer  */
		string id;

		datetime? startTime;
	    
		datetime? endTime;
    	  	
		string? title;

		//string? offerDescription;  //description for this offer that can override the product description
		/*
			Following are fields that are optionally supported
			across marketplaces.  Will be ignored if market does
			not support this.
		*/
		string? subTitle;
		boolean? giftWrapAvailable;
		//Indicates where in the marketplace category to list
		array<string>? marketCategories;

		//Following data can override data in a specified profile
		PaymentPolicy? paymentPolicy;
		ShippingPolicy? shippingPolicy;
	    ReturnPolicy? returnPolicy;
	    array<Sku> skus;
	    array<string>? customCategories;
	}
	
	
	record GetAllAvailableChannels {

	}
	
    record GetAllAvailableChannelsSucceeded {
		string channelName;
		string channelProviderName;
	    //Caller must get destination ID from header - X-XC-PUBLISHER-ID
	}

	record GetAllSites {  //goes to a specific channnel
	
	}
	
    record GetAllSitesSucceeded {
		array<SiteWithEnvironments> sitesWithEnvironments;
	}
	record SiteWithEnvironments{
		Site site;
		array<Environment> environments;
	}
	
    record GetAllSitesFailed {
		array<Error> errors;
	}
	
	record LookupSiteMetadata {  
		array<string> siteCode
		string? environmentName
	}
	
	record LookupSiteMetadataSucceeded {  
		array<SiteMetadata> siteMetadata
		string? environmentName
	}

	
	record LookupSiteMetadataFailed {  
		array<string> siteCode
		string? environmentName
		array<Error> errors;
	}
	
	record SearchCategories {
		string? siteCode;
		string? xProductTypeId ;  
		string? environmentName ;
	}

	record SearchCategoriesSucceeded {
		array<Category> categories; 
		string? siteCode;
		string? environmentName;
	}

	record SearchCategoriesFailed {
		string? siteCode;
		string? environmentName;
		array<Error> errors;
	}
	
	record LookupPolicyGroup {
		string policyGroupId;
	}

	record LookupPolicyGroupSucceeded {
		PolicyGroup p;
	}
	
	record LookupPolicyGroupFailed {
		string policyGroupId;
		array<Error> errors;
	}
	
	record CreatePolicyGroup {
		PolicyGroupData p; 
	}

	record CreatePolicyGroupSucceeded {   
		PolicyGroup p; 
	}
	
	record CreatePolicyGroupFailed {
		PolicyGroupData p;
		array<Error> errors;
	}
	
	record UpdatePolicyGroup {
		PolicyGroup p; 
	}

	record UpdatePolicyGroupSucceeded {
		PolicyGroup p;
	}

	record UpdatePolicyGroupFailed {
		PolicyGroup p;
		array<Error> errors;
	}
	
	record DeletePolicyGroup {
		string policyGroupId;
	}

	record DeletePolicyGroupSucceeded {
		string policyGroupId;
	}

	record DeletePolicyGroupFailed {
		string policyGroupId;
		array<Error> errors;
	}
	
	record PublishOffer {
		OfferDetails offer; 
		string? policyGroupId;
	}

		
	record PublishOfferWithProductData {
		OfferDetailsWithProductData offer;
		string? policyGroupId;
	}

	record PublishOfferSucceeded { //Does not map 1:1 with request message - need to model this
		Offer offer;
		string? policyGroupId;
	}

	record PublishOfferFailed {
		OfferDetails offer;
		string? policyGroupId;
		array<Error> errors;
	}
	
	record RevisePublishedOffer {
		OfferDetails update; //must have channelOfferId
		string? policyGroupId;
	}
	
    record RevisePublishedOfferWithProductData {
		OfferDetailsWithProductData update; //must have channelOfferId
		string? policyGroupId;
	}

	record RevisePublishedOfferSucceeded {
		Offer updatedOffer; 
		string? policyGroupId;
	}
	
	record RevisePublishedOfferFailed {
		OfferDetails updatedOffer;
		array<Error>errors;
		string? policyGroupId;
	}
	
	
	record RevokePublishedOffer {
		string offerId;
		string? policyGroupId;
	}

	record RevokePublishedOfferSucceeded {
		string offerId;
		string? policyGroupId;
	}

	record RevokePublishedOfferFailed {
		CancelOfferError cancelError;
		string? policyGroupId;
  	}
  	
	record OfferDeactivated {
		string offerId;
		string reason;
		string? policyGroupId;
	}

	
	record SearchOffers{
		array<string>? skus;
		datetime? startTime;
		datetime? endTime;
		string? xAccountId;
	}	
	record SearchOffersSucceeded{	
		array<Offer> offers;
		SearchOffers request;
	}
	record SearchOffersFailed{
		SearchOffers request;
		array<Error> errors;
	}
	record SearchTopSellingProducts{
		string? siteCode;
		string? environmentName;
		int numberOfProductsToReturn  "A number greater than 0 that indicates the number of products the consumer wishes to see"
	}
	
	record TopSellingProduct{
		string productId "An Id for the product defined by the marketplace"
		string productTitle "The title of this product"
		int rank "a number between 1 and n where 1 is the highest ranking product, the ranking determined by the marketplace";
		string? imageURL "A product may or may not have an image";		
		CurrencyAmount? minPrice "Minimum price of this product"; 
		CurrencyAmount? maxPrice "Maximum price of this product";
		string productURL;
		long reviewCount;	
	}

	record SearchTopSellingProductsSucceeded{
		array<TopSellingProduct> products "The products are returned in order from highest sales rank to lowest";
		SearchTopSellingProducts request;
	}
	
	record SearchTopSellingProductsFailed{
		array<Error> errors;
		SearchTopSellingProducts request;
	}
	
}