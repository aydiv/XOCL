  
package com.x.marketplace.v1{
	
	import com.x.marketplace.v1.*
	import com.x.authz.v1.*
	
	process MarketplaceSetup
	{
		description "A consumer queries one sales channel, gets sites and metadata back"

		roles(MarketplaceMetadataConsumer, MarketplaceMetadataProvider, AuthorizedMarketplaceUser, Marketplace)
	}
	
	workflow MarketplaceSetup implements MarketplaceSetup
	{		
		any{
			do{
				any{
			 		transaction GetAllAvailableChannel
					{
						roles(MarketplaceSetup.MarketplaceMetadataConsumer, MarketplaceSetup.MarketplaceMetadataProvider)
					}
				}
				any{
					transaction GetAllSite  //goes to a specific destination
					{
						roles(MarketplaceSetup.MarketplaceMetadataConsumer, MarketplaceSetup.MarketplaceMetadataProvider)
					}	
				}
				any{
					transaction LookupSiteMetadata
					{
						roles(MarketplaceSetup.MarketplaceMetadataConsumer, MarketplaceSetup.MarketplaceMetadataProvider)
					}	
				}
				any{
					transaction SearchCategory //A consumer searches site for available categories
					{
						roles(MarketplaceSetup.MarketplaceMetadataConsumer, MarketplaceSetup.MarketplaceMetadataProvider)
					}
				}	
			}
		    workflow AuthorizationGrant{
					roles(MarketplaceSetup.AuthorizedMarketplaceUser, MarketplaceSetup.Marketplace)
			}	
		}
		
		
	}
	
	
    process PolicyGroupCreation<Ebay> (PolicyGroup policyGroup)
	{
		description "A merchant creates a policy group"
		
		roles(MarketplaceMerchantConsole, MarketplacePolicyManager, MarketplaceMetadataConsumer, MarketplaceMetadataProvider)
		
		preconditions(!exists(policyGroup))
	
		workflow 
		{
			any{
				workflow MarketplaceSetup
				{
					roles(MarketplaceMetadataConsumer, MarketplaceMetadataProvider)
				}
			}
		     transaction CreatePolicyGroup<Ebay>
			 {
				   roles(MarketplaceMerchantConsole, MarketplacePolicyManager)
			}
		}

	    postconditions
		{
			success(exists(policyGroup))
			failure(!exists(policyGroup))
		}
	}	
	
    process PolicyGroupUpdate<Ebay> (PolicyGroup policyGroup)
	{
		description "A merchant updates a policy group"
		
		roles(MarketplaceMerchantConsole, MarketplacePolicyManager)
		
		preconditions(exists(policyGroup))
	
		workflow 
		{
		     transaction UpdatePolicyGroup<Ebay>
			 {
				  roles(MarketplaceMerchantConsole, MarketplacePolicyManager)
			}
		}

	    postconditions
		{
			success(exists(policyGroup))
			failure(exists(policyGroup))
		}
	}
	
		
    process PolicyGroupDeletion (PolicyGroup policyGroup)
	{
		description "A merchant deletes a policy group"
		
		roles(MarketplaceMerchantConsole, MarketplacePolicyManager)
		
		preconditions(exists(policyGroup))
	
		workflow 
		{
			
		     transaction DeletePolicyGroup
			 {
				  roles(MarketplaceMerchantConsole, MarketplacePolicyManager)
			}
		}

	    postconditions
		{
			success(!exists(policyGroup))
			failure(exists(policyGroup))
		}
	}
	
    process PolicyGroupLookup<Ebay>
	{
		description "A merchant looks up a policy group by ID"
		roles(MarketplaceMerchantConsole, MarketplacePolicyManager)
	
		workflow
		{
			transaction LookupPolicyGroup<Ebay>
			{
				roles(MarketplaceMerchantConsole, MarketplacePolicyManager)
			}
		}
	}
	
	process OfferPublication<Ebay>(Offer offer)  
	{
		description "A merchant publishes offers to a sales channel"
		roles(OfferManager, Marketplace)
	
		preconditions(offer[Offer.Created])
	
		workflow
		{
			transaction PublishOffer<Ebay>
			{
				roles(OfferManager, Marketplace)
			}
			any{
				workflow OfferDeactivation
				{
					roles(Marketplace, OfferManager)	
				}
			}
		}
	   postconditions
		{
			success(offer[Offer.Active])
		}
	}
	
	process OfferDeactivation(Offer offer)
	{
		description "A sales channel deactivates an existing offer"
		roles (Marketplace, OfferManager)
		
		preconditions(offer[Offer.Inactive])

		postconditions
		{
			success(offer[Offer.Inactive])
		}
	}
	
    workflow OfferDeactivation implements OfferDeactivation
	{
		transaction OfferDeactivated
		{
			roles(Marketplace, OfferManager)
		}
	}
	
	
	process PublishedOfferRevision(Offer offer)
	{
		
		description "A merchant updates publishes offers in a sales channel"
		
		roles(OfferManager, Marketplace)
		
		preconditions(exists(offer))
	
		workflow
		{
				transaction RevisePublishedOffer
				{
					roles(OfferManager, Marketplace)
				}
				any{
					workflow OfferDeactivation
					{
						roles(Marketplace, OfferManager)	
					}
				}
		}
	   postconditions
		{
			success(offer[Offer.Active])
		}
		
	}
	
	process PublishedOfferRevocation(Offer offer)
	{
		
		description "A merchant cancels an offer in a sales channel"
		
		roles(OfferManager, Marketplace)
	
		preconditions(offer[Offer.Active])
	
		workflow
		{
				transaction RevokePublishedOffer
				{
					roles(OfferManager, Marketplace)
				}
			
		}
	   postconditions
		{
			success(offer[Offer.Inactive])
		}
		
	}
	
	process OfferSearch{
	    
	    description "Offer Manager queries Sales Channel to reconcile offer data"
		
		roles( OfferManager, Marketplace)
		
		workflow
		{
				transaction SearchOffer
				{
						roles(OfferManager, Marketplace)
				}	
		}
		
	}
    
    process AuthorizedAccountSearch (Authorization auth)
	{
		description "A merchant retrieves their account information"
		roles(MarketplaceMetadataConsumer, MarketplaceMetadataProvider)
		preconditions(exists(auth))
		workflow
		{
			transaction GetAllAuthorizedAccount
			{
				roles(MarketplaceMetadataConsumer, MarketplaceMetadataProvider)
			}
		}
	}
	
	process AuthorizationRevoke (Authorization auth)
	{
		description "A merchant disassociates their marketplace account"
		roles(MarketplaceMetadataConsumer, MarketplaceMetadataProvider)
		preconditions(exists(auth))
		workflow
		{
			transaction RevokeAuthorization
			{
				roles(MarketplaceMetadataConsumer, MarketplaceMetadataProvider)
			}
		}
	    postconditions
		{
			success(!exists(auth))
		}	
	}
}