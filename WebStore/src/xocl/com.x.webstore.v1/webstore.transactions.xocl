package com.x.webstore.v1{
	
	import com.x.webstore.v1.*
	
	entity WebStoreOffer
    
    transaction GetAllWebStoreProvider broadcast query 
    {
    	description "Searches for all web store providers and either returns a success message or nothing at all. No failure message is returned."
        sender
        {
        	message GetAllWebStoreProvider 
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	success GetAllWebStoreProviderSucceeded        
        	
        	//No failure message in this case.  If the capability cannot give provider information, it should not return anything.  
                    	
        } 
    }
        
    transaction GetAllWebStore  query 
    {
    	description "Searches for all web stores and returns either a succeeded or failed message."
        sender
        {
        	message GetAllWebStore 
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response	
         	// A success message does not have a response timeout
        	success GetAllWebStoreSucceeded        
                    	
        	// A failure message does not have a response timeout
            failure GetAllWebStoreFailed  
        } 
    }
    
    transaction GetAllCategory  query 
    {
    	description "Searches for all categories in a web store and returns either a succeeded or failed message."
        sender
        {
        	message GetAllCategory
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response	
         	// A success message does not have a response timeout
        	success GetAllCategorySucceeded        
                    	
        	// A failure message does not have a response timeout
            failure GetAllCategoryFailed  
        } 
    }
    

    transaction SearchWebStoreOffer query 
    {
    	description "Searches for all web store offers and returns either a succeeded or failed message."
        sender
        {
        	message SearchWebStoreOffer
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	//Offers must be returned in a deterministic order
        	success SearchWebStoreOfferSucceeded        
                    	
        	// A failure message does not have a response timeout
            failure SearchWebStoreOfferFailed  
        } 
    }
    
    transaction CreateWebStoreOffer response
    {
    	description "Attempts to create a web store offer and returns either a succeeded or failed message." 
        sender
        {
        	message CreateWebStoreOffer
        	{
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success CreateWebStoreOfferSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure CreateWebStoreOfferFailed
            {
            	timeouts(receipt=30s)
            	retries=3
            }
        }
    }
    
    transaction DeleteWebStoreOffer response
    {
    	description "Attempts to delete a web store offer and returns either a succeeded or failed message."
        sender
        {
        	message DeleteWebStoreOffer
        	{
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success DeleteWebStoreOfferSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure DeleteWebStoreOfferFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s)
            	retries=3
            }
        }
    }
     transaction UpdateWebStoreOffer response
    {
    	description "Attempts to update a web store offer and returns either a succeeded or failed message."
    	
        sender
        {
        	message UpdateWebStoreOffer
        	{
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success UpdateWebStoreOfferSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateWebStoreOfferFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s)
            	retries=3
            }
        }
    }
    
   	transaction WebStoreOfferCreated notify
   	{
   		description "Notification that a web store offer was created."
   		
   		sender
   		{
   			message WebStoreOfferCreated
   		    {
        		timeouts(receipt=30s)     		
        		retries=3
        	}
   		}
   	}
   	
   	transaction WebStoreOfferPriceUpdated notify
   	{
   		description "Notification that the price of a web store offer was updated."
   		
   		sender
   		{
   			message WebStoreOfferPriceUpdated
   			{
   				timeouts(receipt=30s)     		
        		retries=3
        	}
   		}
   	}
   	
   	transaction WebStoreOfferQuantityUpdated notify
   	{
   		description "Notification that the quantity of a web store offer was updated."
   		
   		sender
   		{
   			message WebStoreOfferQuantityUpdated{
   			    timeouts(receipt=30s)     		
        		retries=3
        	}
   		}
   	}
   	
   	transaction WebStoreOfferDeleted notify
   	{
   		description "Notification that a web store offer was deleted."
   		
   		sender
   		{
   			message WebStoreOfferDeleted{
   			    timeouts(receipt=30s)     		
        		retries=3
        	}
   			
   		}
   	}  
   	   	
   	transaction WebStoreOfferDeleted notify  //??is this a duplicate of the above transaction
   	{
   		description "TBD"
   		
   		sender
   		{
   			message WebStoreOfferDeleted{
   			    timeouts(receipt=30s)     		
        		retries=3
        	}
   		}
   	}
   	   	
   	transaction WebStoreOfferUpdated notify
   	{
   		description "Notification that a web store offer was updated."
   		
   		sender
   		{
   			message WebStoreOfferUpdated{
   			    timeouts(receipt=30s)     		
        		retries=3
        	}
   		}
   	}
   	


}