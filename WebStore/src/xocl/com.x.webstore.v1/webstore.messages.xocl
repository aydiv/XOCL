package com.x.webstore.v1{
	
	import com.x.core.v1.*
	
	enum OfferState{
		summary "Identifies the status of the offer."
		description "Identifies the offer as being either Published or Suspended."
		
		PUBLISHED "Offer has been published to the comparison shopping engine.",
		SUSPENDED "TBD"
	}
	
    record WebStore{
		summary "The online store information."
		description "Captures the online store name, ID, languaged used, currency accepted and the URL to the store."

    	string webStoreName "Name of the online store.";
    	string webStoreId "Identifier for the online store.";
		string language "Languague used for the online store.";
		string currencyCode "Code for the currency the online store accepts.";
		string url "Location (URL) of the online store.";
	}
	
	record WebStoreOffer extends WebStoreOfferData{
		summary "Offer information."
		description "Captures the identifier of the offer and its status."

		string offerId "Identifier of the offer.";
		OfferState offerState "Current status of the offer, which can be Published or Suspended.";
	}
	
	record WebStoreOfferData {
		summary "Details offer information."
		description "Captures the URL and identifier of the online store, and the price, quanity, SKU, and category of the offer.  "

		string url "Location (URL) of the product in the online store.";
		CurrencyAmount currentPrice "TBD";
		long quantity "How many of this product are in stock.";
		string sku "Standardized SKU (Stock Keeping Unit) of the product. This is a unique number per product and merchant.";
		string webStoreId "Identifier for this web store.";
		array<string>? categoryId "TBD";
	}
	
	record Category {
		summary "Category information."
		description "Captures the identifier, name, and URL of the category and the identifier of the parent category."

		string id "Identifier of the offer category.";
		string name "Name of the category.";
		string parentId  "Identifier of the parent category."
		string? categoryUrl "Location (URL) for the category.";
	}
	record GetAllCategory{
		summary "All the categories in an online store."
		description "Retrieves all the product categories defined in the online store."

		string webStoreId "Identifier of a web store.";
	}  
	record GetAllCategorySucceeded{
		summary "Search of product categories succeeded."
		description "Confirms successful retrieval of the categories in the online store."

		string webStoreId "Identifier for the online store.";
		array<Category> categories "Array of product categories.";
	} 
	record GetAllCategoryFailed{
		summary "Search of product categories failed."
		description "Reports error details for a failed category search."

		string webStoreId "Identifier for the online store.";
		array<Error> errors "Error code and details of the failed category search.";
	}    
    record GetAllWebStoreProvider {
		summary "TBD"
		description "TBD"


	}
	
    record GetAllWebStoreProviderSucceeded {
		summary "TBD"
		description "TBD"

		string providerName "TBD";
		 //Caller must get destination ID from header - X-XC-PUBLISHER-ID
	}
	
	record GetAllWebStore {
		summary "TBD"
		description "TBD"

	}
	
    record GetAllWebStoreSucceeded {
		summary "TBD"
		description "TBD"

		string providerName;
	    //Caller must get destination ID from header - X-XC-PUBLISHER-ID
	    array<WebStore> stores "TBD";
	}
	
	
	record GetAllWebStoreFailed {
		summary "TBD"
		description "TBD"

		string providerName "TBD";
	    array<Error> errors "TBD";
	}
	
	
	record SearchWebStoreOffer{
		summary "TBD"
		description "TBD"
  
    	string? webStoreId "Identifier for the online store.";
		
		/* When this field is present, get all customers modified since this date that also match the other criteria */
		datetime? modifiedSince;
		
		/**
		 * Restrict the number of items return to this many or less.
		 * When null, it is assumed there is no restriction
		 */
		long? itemsRequested;
		
		/**
		 * Return the results starting from this zero-based index.
		 * When null, items will be returned started from the first item
		 */
		long? startItemIndex "TBD";
	}
	
	record SearchWebStoreOfferSucceeded{	
		summary "TBD"
		description "TBD"

		array<WebStoreOffer> webStoreOffers "TBD";
		long totalItemsFound "TBD";
		SearchWebStoreOffer request "TBD";
	}
	
	record SearchWebStoreOfferFailed{
		summary "TBD"
		description "TBD"

		array<Error> errors "TBD";
		SearchWebStoreOffer request "TBD";
	}
	record CreateWebStoreOffer{
		summary "TBD"
		description "TBD"

		WebStoreOfferData offer "TBD";
	}
    record CreateWebStoreOfferSucceeded{
		WebStoreOffer offer "TBD";
	}
	record CreateWebStoreOfferFailed{
		summary "TBD"
		description "TBD"

		WebStoreOfferData offer "TBD";
		array<Error> errors "TBD";
	}
	record UpdateWebStoreOffer{
		summary "TBD"
		description "TBD"

		WebStoreOffer offer "TBD";
	}
    record UpdateWebStoreOfferSucceeded{
		summary "TBD"
		description "TBD"

		WebStoreOffer offer "TBD";
	}
	record UpdateWebStoreOfferFailed{
		summary "TBD"
		description "TBD"

		WebStoreOffer offer "TBD";
		array<Error> errors "TBD";
	}
	record DeleteWebStoreOffer{
		summary "TBD"
		description "TBD"

		string offerId "TBD";
	}
	record DeleteWebStoreOfferSucceeded{
		summary "TBD"
		description "TBD"

		string offerId "Identifier for the successful offer.";
	}
	record DeleteWebStoreOfferFailed{
		summary "TBD"
		description "TBD"

		string offerId "Identifier for the failed offer.";
		array<Error> errors "TBD";
	}
	record WebStoreOfferCreated{
		summary "TBD"
		description "TBD"

		WebStoreOffer offer "TBD";
	}
	record WebStoreOfferUpdated{
		summary "TBD"
		description "TBD"

		WebStoreOffer offer "TBD";
	}
	record WebStoreOfferDeleted{
		summary "TBD"
		description "TBD"

		WebStoreOffer offer "TBD";
	}
	
    record WebStoreOfferPriceUpdated{
		summary "TBD"
		description "TBD"

	    string sku "TBD";
		CurrencyAmount currentPrice "TBD";
		string webStoreId "Identifier for the online store.";
	}
	
    record WebStoreOfferQuantityUpdated{
		summary "TBD"
		description "TBD"

		string sku "TBD";
		long quantity "TBD";
		string webStoreId "Identifier for the online store.";
	}
}