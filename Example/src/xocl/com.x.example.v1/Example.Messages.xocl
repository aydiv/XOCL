/*
 * This file contains a sample of the X.commerce Open Commerce Language (XOCL).
 * By convention, messages and supporting types for a domain reside in the file <domain>.Messages.xocl
 * The XOCL type notation is similar to the AVDL type notation.
 */

/*
 * A XOCL file must contain exactly one top level package.
 * A package defines a namespace and optionally a version for the elements it contains.
 * A package name must be a dot delimited path that ends in a version indicator.
 * A version indicator consists of the letter 'v' followed by an integer valued version number.
 */
package com.x.example.v1
{
	/*
	 * An import brings in definitions from another package, or from the same package in other files.
	 */
	import com.x.core.v1.*
	
	/*
	 * An enumerated type is a list of literals. Literal values are integers starting at zero as in AVDL.
	 * An enumerated type maps directly to the AVDL equivalent and has the same semantics.
	 */
    enum OrderType {
    	InHouse 
    	OutSourced
    	DropShipped
    }
    
	/* 
	 * A record is a structured type containing a set of named properties.
	 * A record type maps directly to the AVDL equivalent and has the same semantics.
	 */
	record Order {
    	/*
    	 * A property is defined using the pattern <type><name>.
    	 * An optional assignment expression may be used to define the default value of the property.
    	 * A guid is a unique ID.
    	 * A guid maps to an AVDL string formatted as a GUID by the implementation.
    	 */
		guid orderID

    	/*
    	 * This property has an enumerated type, so it is initialized with an enumeration literal.
    	 */
    	OrderType orderType = InHouse
	}
	
	/*
	 * Messages are defined by records. This record defines a message for transaction OrderCreated.
	 */
    record OrderCreated {
    	/*
    	 * A record type may contain instances of other record types by value.
    	 * Embedded records map directly to the AVDL equivalent and have the same semantics.
    	 */
    	Order order;
    }
    
    /*
     * This record extends OrderCreated. 
     * Extension maps to replication in AVDL. All properties in the extended record are replicated 
     *   in the extending record. 
     * This record is used by a variant of transaction OrderCreated.
     * By convention, messages for variants use the naming pattern <default_message_name><variant>.
     */
    record OrderCreatedWithCreationMetadata extends OrderCreated {
    	/*
    	 * The ? operator in the following declaration indicates that the property is optional.
    	 * An optional property maps to a union{type, null} with a default of null in AVDL.
    	 * A datetime encodes date and time.
    	 * A datetime maps to an AVDL string with RFC3339 format.
    	 */
    	datetime? dateCreated 
    	
    	/*
    	 * The bytes type maps directly to the AVDL equivalent and has the same semantics.
    	 */
    	bytes metadata
    }
    
    record OrderCreatedWithAuthorization extends OrderCreatedWithCreationMetadata {
    	
    	/*
    	 * The map and fixed types map directly to the AVDL equivalents and have the same semantics.
    	 */
    	//TODO: there is currently a language/generator incompatibility regarding fixed type, commenting this out for now.
    	//map<fixed(256)> tokens
    }

	record OrderCancelled {
		guid orderID
	}

	/*
	 * There are two types of query: search and lookup.
	 *   A search takes explicitly supplied search criteria and returns an array of objects.
	 *   A lookup takes an object identifier and returns the object.
	 */
    record SearchOrder {
		/*
		 * By convention, a search includes an optional limit on the number of items returned.
		 * If not specified, the number of items returned in not limited.
		 * The int and long types maps directly to the AVDL equivalents and have the same semantics.
		 */
		long? itemsRequested;
		
		/*
		 * By convention, a search includes an optional zero-based starting index.
		 * If not specified, results are returned starting with the first item in the result set.
		 */
		long? startItemIndex;
   }
 
 	/*
 	 * By convention, search results include the search criteria.
 	 */
    record SearchOrderSucceeded extends SearchOrder {
		/*
		 * By convention, search results are returned as an array of records.
    	 * The array type maps directly to the AVDL equivalent and has the same semantics.
		 */
        array<Order> results;
    }
 
    record SearchOrderFailed extends SearchOrder {
	 	/*
	 	 * By convention, a failure message contains an array of Error records.
	 	 */
        array<Error> errors;
    }
    
    record LookupOrder {
	    /*
	     * By convention, a lookup includes the ID of the object being requested.
	     */
        guid orderID;
    }
 
    record LookupOrderSucceeded extends LookupOrder {
    	/*
    	 * By convention, a lookup returns the entire object that was requested.
    	 */
    	Order order;
    }
    
    record LookupOrderFailed extends LookupOrder {
        array<Error> errors;
    }
    
    /*
     * This record defines a message for transaction PrepareOrder.
     */
    record PrepareOrder {
    	guid orderID
    }    

	/*
	 * This record defines a success message for transaction PrepareOrder.
	 * By convention, the default message uses the naming pattern <default_message_name>Succeeded.
	 * Extending the request message makes it easier to correlate the results with the request.
	 */
	record PrepareOrderSucceeded extends PrepareOrder {} 
	
	/*
	 * This record defines a failure message for transaction PrepareOrder.
	 * By convention, the default message uses the naming pattern <default_message_name>Failed.
	 */
	record PrepareOrderFailed extends PrepareOrder {} 

    record ShipOrder {
    	guid orderID
    	
    	/*
    	 * The union and string types map directly to the AVDL equivalents and have the same semantics.
    	 */ 
    	union{string, null} shippingService = null
    	
    	/*
    	 * The float and double types map directly to the AVDL equivalents and have the same semantics.
    	 */ 
		double estimatedWeight = 0.0    	
    }
    
    record ShipOrderSucceeded extends ShipOrder {
    	/*
    	 * A success message for a response transaction may return data the sender.
    	 */
    	string TrackingNumber 
    }
    
    record ShipOrderFailed extends ShipOrder {
        array<Error> errors;
    }
    
    record OrderShipped {
    	guid orderID;
    }
    
    record UpdateInventory {
		string SKU
		int StockLevel = 0
    }
    
    record UpdateInventorySuccess {}
    
    record UpdateInventoryFailure {}
    
    record InventoryUpdated {
		string SKU
		int StockLevel = 0
	}
}
