/*
 * This file contains a sample of the X.commerce Open Commerce Language (XOCL).
 * By convention, messages and supporting types for a domain reside in the file <domain>.Messages.xocl
 */

/*
 * The XOCL type notation is similar to the AVDL type notation.
 * A package defines a namespace and optionally a version for the elements it contains.
 * A package name must be a dot delimited path that ends in a version indicator.
 * A version indicator consists of the letter 'v' followed by an integer valued version number.
 */
package com.x.example.v1
{
	/*
	 * An import brings in definitions from another package, or from the same package in other files.
	 */
	import com.x.core.v1.*
	
	/*
	 * An enumerated type is a list of literals. Literal values are integers starting at zero as in AVDL.
	 * An enumerated type maps directly to its AVDL equivalent and has the same meaning in XOCL.
	 */
    enum OrderType 
    {
    	InHouse 
    	OutSourced
    	DropShipped
    }
    
	/* 
	 * A record is a structured type containing a set of named properties.
	 */
	record Order
	{
    	/*
    	 * A property is defined using the pattern <type><name>.
    	 * An optional assignment expression may be used to define the default value of the property.
    	 * A guid is a unique ID. The 'new' initializer supplies a new unique ID.
    	 * A guid maps to an AVDL string formatted as a GUID by the implementation.
    	 */
		guid orderId = new

    	/*
    	 * This property has an enumerated type, so it is initialized with an enumeration literal.
    	 */
    	OrderType orderType = InHouse
	}
	
	/*
	 * Messages are defined by records. This record defines a message for transaction OrderCreated.
	 */
    record OrderCreated
    {
    	/*
    	 * A record type may contain instances of other record types by value.
    	 */
    	Order order;
    }
    
    /*
     * This record extends OrderCreated. 
     * Extending a record is like subclassing in Java. The extender inherits all fields from the extendee.
     * This record is used by a variant of transaction OrderCreated.
     */
    record OrderCreatedVariant1 extends OrderCreated 
    {
    	/*
    	 * The ? operator in the following declaration indicates that the property is optional.
    	 * An optional property maps to a union{type, null} with a default of null in AVDL.
    	 * A datetime encodes date and time. The 'now' initializer supplies the current datetime.
    	 * A datetime maps to an AVDL string formatted as a DateTime by the implementation.
    	 */
    	datetime? dateCreated = now 
    	
    	/*
    	 * The fixed and bytes types map directly to their AVDL equivalents and have the same meanings in XOCL.
    	 */
    	fixed(256) token
    	bytes buffer
    }
    
    record OrderCreatedVariant2 extends OrderCreatedVariant1 
    {
    	
    	/*
    	 * The map and string types map directly to their AVDL equivalents and have the same meanings in XOCL.
    	 */ 
    	map<string> authorizations 
    }

	/*
	 * There are two types of query: search and lookup.
	 *   A search takes explicitly supplied search criteria and returns an array of objects.
	 *   A lookup takes an object identifier and returns the object.
	 */
    record SearchOrder
    {
		/* 
		 * When specified, get all orders modified since this date,
		 */
		datetime? modifiedSince;
		
		/**
		 * Restrict the number of items return to this many or less.
		 * When null, it is assumed that there is no restriction.
		 */
		long? itemsRequested;
		
		/**
		 * Return the results starting from this zero-based index.
		 * When null, items will be returned started from the first item.
		 */
		long? startItemIndex;
   }
 
 	/*
 	 * By convention, search results include the search criteria.
 	 */
    record SearchOrderSucceeded extends SearchOrder
    {
        array<Order> results;
    }
 
 	/*
 	 * By convention, a failure message congtains an array of Error.
 	 */
    record SearchOrderFailed extends SearchOrder
    {
        array<Error> errors;
    }
    
    record LookupOrder
    {
        guid orderId;
    }
 
    record LookupOrderSucceeded extends LookupOrder
    {
    	OrderType orderType;
    }
    
    record LookupOrderFailed extends LookupOrder
    {
        array<Error> errors;
    }
    
    /*
     * This record defines a message for transaction PrepareOrder.
     */
    record PrepareOrder
    {
    	guid orderID
    }    

	/*
	 * This record defines a success message for transaction PrepareOrder.
	 * By convention, the default message uses the naming pattern <default_message_name>Succeeded.
	 * Extending the request message includes the entity identifier to simplify correlation.
	 */
	record PrepareOrderSucceeded extends PrepareOrder {} 
	
	/*
	 * This record defines a failure message for transaction PrepareOrder.
	 * By convention, the default message uses the naming pattern <default_message_name>Failed.
	 */
	record PrepareOrderFailed extends PrepareOrder {} 

    record ShipOrder
    {
    	guid orderID
    	
    	/*
    	 * The union and int types map directly to their AVDL equivalents and have the same meanings in XOCL.
    	 */ 
    	union{int, string} estimatedWeight = null
    }
    
    record ShipOrderSucceeded extends ShipOrder
    {
    	/*
    	 * A success message for a response transaction may return data the sender.
    	 */
    	string TrackingNumber = null 
    }
    
    record ShipOrderFailed extends ShipOrder
    {
        array<Error> errors;
    }
    
    record UpdateInventory
    {
		string SKU
		int StockLevel = 0
    }
    
    record UpdateInventorySuccess {}
    
    record UpdateInventoryFailure {}
    
    record InventoryUpdated
	{
		string SKU
		int StockLevel = 0
	}
}
