/*
 * This file contains a sample of the X.commerce Open Commerce Language (XOCL).
 * By convention, entities and transactions for a domain reside in the file <domain>.Transactions.xocl
 */

package com.x.example.v1
{	
	import com.x.example.v1.* 
	
 	/*
 	 * The identity and lifecycle of an entity are shared but its structure is private. 
 	 * Information about the entity is communicated by messages.
 	 */
    entity Order
    {
    	/*
    	 * An entity may have an optional state machine that defines its leficycle.
    	 * Each state has a name and an optional list of valid transitions to other states.
    	 * An entity is created in the first state listed, which is Created by convention.
    	 */
        state Created[Prepared, Cancelled] // A Created Order can be Prepared or Cancelled.        
        state Prepared[Shipped, Cancelled] // A Prepared Order can be Shipped or Cancelled.
        state Shipped[Delivered, Returned] // A Shipped Order can be Delivered or Returned.
        state Delivered[Returned, Completed] // A Delivered Order can be Returned or Completed.
        state Returned[Returned] // A Returned Order can be Cancelled.
        state Cancelled // A Cancelled Order cannot be processed any further.
        state Completed // A Completed Order cannot be processed any further.
    }
    
    entity InventoryReservation
    {
        state Requested[Committed, Cancelled]
        state Committed
        state Cancelled
    }
    
	/*
	 * A transaction is an exchange of messages that leaves the process in a known state.
	 * A transaction implements one of several predefined patterns. The pattern follows the transaction name.
	 */ 

    /*
     * An inform transaction, also called an event, is a one way interaction with no return messages.
	 * By convention, an event uses the naming pattern <noun><past_tense_verb>.
     */
    transaction InventoryUpdated inform
    {
    	/*
    	 * Every transaction has exacty two roles: sender and receiver. One or more capabilities may
    	 *   play the receiver role at the same time in an event or broadcast transaction.
	     * The sender of the first message in a workflow must set the X-XC-MESSAGE-GUID-CONTINUATION 
	     *   header to null, and the X-XC-RESULT-CORRELATION-ID to a new GUID.
	     *     The value of the X-XC-RESULT-CORRELATION-ID header is the workflow ID.
	     * The sender of any other message in a workflow must set 
	     *   the X-XC-MESSAGE-GUID-CONTINUATION header to the ID of the message that triggered the  
	     *     sending of the current message, and  
	     *   the X-XC-RESULT-CORRELATION-ID header to the value it had on the message that triggered the 
	     *     sending of the current message.
    	 */
        sender
        {
        	/*
        	 * The following line defines the message sent to start the transaction.
        	 * This message uses the default message name, which is the transaction name.
	    	 * It also uses the default topic name, which is the transaction name.
	         * A topic is generated for every message in every transaction called by a workflow.
			 * The default topic name uses the naming pattern <workflow_package>/<workflow_name>/<message_name>.
			 * Since no return messages can be sent, an event has no timeouts or retries.
        	 */
        	message InventoryUpdated
        }
        
        /*
         * The receiver of an event cannot send any return messages, and does not even have to be declared.
         * If a message is received out of order, the receiver must send a cancellation to abort the transaction 
         *   with the Reason set to MessageOutOfSequence.
         *     A message is out of order if it does not follow a valid predecessor within the current workflow.
		 *   A cancellation uses the standard message type com.x.core.v1.TransactionCancelled. 
		 *   A cancellation must be sent to the standard topic com.x.core.v1/TransactionCancelled.
		 *   See com.x.core.v1.TransactionCancelled for more information about cancellations.
         */
        receiver
	}
	
	/*
	 * A notify transaction, also called a notification, is a one way interaction with acknowledgements.
	 * By convention, a notification uses the naming pattern <noun><past_tense_verb>.
	 * This transaction has variants, which are specified in angle brackets.
	 */
    transaction OrderCreated<WithCreationMetadata, WithAuthorization> notify 
    { 
    	/*
    	 * The sender of a notification or command must perform the following actions:
    	 *   Send the appropriate message to start the transaction on the appropriate topic.
		 *   If the contract requires receipt acknowledgement, wait for com.x.core.v1.MessageReceived 
		 *       on topic com.x.core.v1/MessageReceived.
		 *     If timeout occurs, retry
		 *       If retries exhausted, send com.x.core.v1.TransactionCancelled to the receiver on topic 
		 *         com.x.core.v1/TransactionCancelled with reason ValidationTimedOut.
		 *   If the contract requires validation acknowledgement, wait for com.x.core.v1.MessageValidated 
		 *       on topic com.x.core.v1/MessageValidated.
		 *     If timeout occurs, retry
		 *       If retries exhausted, send com.x.core.v1.TransactionCancelled to the receiver on topic 
		 *         com.x.core.v1/TransactionCancelled with reason ValidationTimedOut.
    	 */
        sender
        {        	
        	/*
			 * The receiver of a notification or command must send acknowledgements to the sender.
			 * If an acknowledgement is received out of order, then the sender may send a cancellation
			 *   to abort the transaction, with the Reason set to ReceiptOutOfSequence or ValidationOutOfSequence.
        	 */
        	message OrderCreated
        	{
        		/*
        		 * Acknowledgements are subject to timeouts.
				 * A timeout is measured from the start of the transaction to the receipt of the acknowledgement.
				 * The unit for a timeout may be 's' for seconds, 'm' for minutes, 'h' for hours, or 'd' for days.
				 * There are two types of acknowledgement: receipt and validation.
				 *   A receipt indicates that the receiver received the message and was able to parse it.
				 *     The timeout for a receipt is specified using the receipt keyword.
				 *     If a receipt timeout is specified, then the receiver must send a receipt, a validation, 
				 *       or a cancellation.
				 *     If a receipt timeout is not specified, then the receiver must not send a receipt.
				 *     A receipt uses the standard message type com.x.core.v1.MessageReceived.
				 *     A receipt must be sent to the standard topic com.x.core.v1/MessageReceived.
				 *     See com.x.core.v1.MessageReceived for more information about receipts.
				 *   A validation indicates that the receiver was able to validate the message contents.
				 *     If the receiver cannot validate the message contents, then it must send a cancellation 
				 *       to abort the transaction, with the Reason set to ValidationError.
				 *     The timeout for a validation is specified using the validation keyword. 
				 *     If a validation timeout is specified, the receiver must send a validation or a cancellation.
				 *     If a validation timeout is not specified, then the receiver must not send a validation.
				 *     If both a receipt timeout and a validation timeout are specified, then the receiver may send 
				 *       a validation instead of a receipt within the receipt timeout.
				 *     A validation uses the standard message type com.x.core.v1.MessageValidated.
				 *     A validation must be sent to the standard topic com.x.core.v1/MessageValidated.
				 *     See com.x.core.v1.MessageValidated for more information about validations.
        		 */ 
        		timeouts(receipt=1h, validation=24h)
        		
        		/*
				 * If a given acknowledgement is not received within the specified timeout, 
				 *   then the sender must retry up to the specified number of times.
				 * If the specified number of retries is exhausted, then the sender must send a cancellation
				 *   to abort the transaction, with the Reason set to ReceiptTimedOut or ValidationTimedOut.
				 * If the number of retries is not specified, it defaults to zero.
        		 */
        		retries=3 
        	}
        	
        	/*
        	 * The variant name in angle brackets indicates that this message is used by the named variant 
        	 *   instead of the default message.
        	 * A variant message may have a different type and/or different SLAs than the default message.
    	     * By convention, variant messages use the naming pattern <default_message_name><variant>.
        	 */
        	message<WithCreationMetadata> OrderCreatedWithCreationMetadata 
        	{
        		timeouts(receipt = 1h, validation=12h)
        		retries=5
        	}
        	
        	/*
        	 * This message is used by the variant WithAuthorization. It does not require any acknowledgements.
	         * This message specifies an optional string to override the default topic name.
	         */
        	message<WithAuthorization> OrderCreatedWithAuthorization topic "this_string/overrides_the_default/topic_name"
        }
        
        /*
         * The receiver of a notification or command must perform the following actions:
		 *   Receive the incoming message on the appropriate topic.
		 *   If the contract requires receipt acknowledgement, send com.x.core.v1.MessageReceived to the 
		 *     sender on topic com.x.core.v1/MessageReceived.
		 *   Call domain logic to validate the contents of the message
		 *   If validation succeeds
		 *     If the contract requires validation acknowledgement, send com.x.core.v1.MessageValidated to the 
		 *       sender on topic com.x.core.v1/MessageValidated.
		 *   If validation fails
		 *     Send com.x.core.v1.TransactionCancelled to the sender on topic com.x.core.v1/TransactionCancelled 
		 *       with reason ValidationError.
         */
        receiver
    }
    
    /*
     * A response transaction, also called a command, is a two way interaction asking the receiver to take action.
	 * By convention, a command uses the naming pattern <verb><noun>.
     */
    transaction PrepareOrder response
    {
    	/*
    	 * After the actions required for a notification, the sender of a command must perform 
    	 *     the following additional actions:
		 *   Wait for the response on the appropriate topics.
		 *     If timeout occurs, retry
		 *       If retries exhausted, send com.x.core.v1.TransactionCancelled to the receiver on topic 
		 *         com.x.core.v1/TransactionCancelled with reason ResponseTimedOut.
		 *   If the contract requires receipt acknowledgement, send com.x.core.v1.MessageReceived to the  
		 *     receiver on topic com.x.core.v1/MessageReceived.
		 *   Call domain logic to validate the contents of the message
		 *   If validation succeeds
		 *     If the contract requires validation acknowledgement, send com.x.core.v1.MessageValidated to the 
		 *       receiver on topic com.x.core.v1/MessageValidated.
		 *   If validation fails
		 *     Send com.x.core.v1.TransactionCancelled to the receiver on topic 
		 *       com.x.core.v1/TransactionCancelled with reason ValidatonError.
    	 */
        sender
        {
        	message PrepareOrder
        	{					
				/*
				 * The receiver of a command must send a response or a cancellation to the sender.
			     * A response must be routed only to the transaction sender by setting the
			     *   X-XC-DESTINATION-ID header to the value of the X-XC-PUBLISHER-PSEUDONYM header 
			     *   on the request message.
			     * The sender of a response must identify the request message by setting the
			     *   X-XC-RESULT-CORRELATION-ID header to the value it had on the request message, and by 
			     *   setting the X-XC-MESSAGE-GUID-CONTINUATION header to the ID of the request message.
				 * A response indicates whether the operation succeeded or failed and may contain additional data.
				 * If a response is received out of order, then the sender must send a cancellation
				 *   to abort the transaction, with the Reason set to ResponseOutOfSequence.
				 *     A response is out of order if it does not arrive within the context of the transaction to 
				 *       which it belongs. 
				 * The timeout for a response is specified using the response keyword.
				 *   It is measured from the start of the transaction to the receipt of the reponse.
				 * If a response timeout is not specified, it defaults to 30s for queries, and to 3m for all 
				 *   other two way transactions.
				 * If a receipt timeout and/or a validation timeout is specified, then the receiver may send a 
				 *   response instead of a receipt and/or a validation, respectively, within the specified timeout.
				 */
        		timeouts(receipt=1h, validation=24h, response=3d)
        		
        		/*
				 * If a response is not received within the specified timeout, 
				 *   then the sender must retry up to the specified number of times.
				 * If the specified number of retries is exhausted, then the sender must send a cancellation
				 *   to abort the transaction, with the Reason set to ResponseTimedOut.
        		 */
        		retries=3
        	}
        }
        
        /*
    	 * After the actions required for a notification, the receiver of a command must perform 
    	 *     the following additional actions:
    	 *   Send the appropriate response to the sender on the appropriate topic.
    	 *   If the contract requires receipt acknowledgement, wait for com.x.core.v1.MessageReceived 
    	 *       on topic com.x.core.v1/MessageReceived.
    	 *     If timeout occurs, retry
    	 *       If retries exhausted, send com.x.core.v1.TransactionCancelled to the sender on topic 
    	 *          com.x.core.v1/TransactionCancelled with reason ReceiptTimedOut.
    	 *   If the contract requires validation acknowledgement, wait for com.x.core.v1.MessageValidated 
    	 *       on topic com.x.core.v1/MessageValidated.
    	 *     If timeout occurs, retry
    	 *       If retries exhausted, send com.x.core.v1.TransactionCancelled to the sender on topic 
    	 *         com.x.core.v1/TransactionCancelled with reason ValidationTimedOut.
         */
        receiver
        {
        	/*
        	 * One or more response messages may be specified. Only one may be used in a given interaction.
        	 * A response message must indicate whether the transaction succeeded or failed.
        	 */
        	
        	/* 
			 * By convention, the default success message uses the naming pattern <default_message_name>Succeeded.
        	 */
        	success PrepareOrderSucceeded
        	{
        		/*
	        	 * A response message may have timeouts requiring acknowledgements from the sender.
	        	 * They are implemented as above, but apply to the response message, not the request message.
        		 */
            	timeouts(receipt=1h, validation=24h)
            	retries=3
            }
            
        	/* 
			 * By convention, the default failure message uses the naming pattern <default_message_name>Failed.
			 * If the default SLAs are acceptable for a message, then the SLA specification block can be omitted.
        	 */
            failure PrepareOrderFailed
        }
    }
        
    /*
     * A transaction can have parameters that can be used in pre and post conditions.
     * A parameter binds to all entities of the specified type referenced by the transaction.
     * A transaction references an entity by using its identity in a message.
     */
    transaction ShipOrder(Order order) response
    {
    	/*
    	 * The sender and receiver declarations are optional. By default, for a command:
    	 *   The sender sends the default message without acknowledgements or retries.
    	 *   The receiver sends the default success and failure messages without acknowledgements or retries.
    	 */
    	 
    	/*
    	 * All preconditions must be true when the transaction starts. 
    	 * The following precondition requires that all referenced orders be in the Prepared state.
         */
        preconditions(order[Order.Prepared])
        
        sender {
        	message ShipOrder
        }
        receiver {
        	success ShipOrderSucceeded
        	failure ShipOrderFailed
        }
        /*
         * All success postconditions must be true when the transaction succeeds.
         * All failure postconditions must be true when the transaction fails.
         * The state of every parameter with a state machine must be unambiguously defined
         *   when the transaction ends.
         */
        postconditions 
        {
        	/*
        	 * When the transaction succeeds, all referenced orders must be in state Order.Shipped.
        	 */
          	success(order[Order.Shipped]) 
          	
        	/*
        	 * When the transaction fails, all referenced orders must be in state Order.Cancelled.
        	 */
          	failure(order[Order.Cancelled])
        }
    }
    
    /*
     * The entire transaction body is optional.
     * By default, a transaction has no variants or parameters, and no pre or post conditions. 
     */
    transaction UpdateInventory response {
    	sender {
    		message UpdateInventory
    	}
    	receiver {
    		success UpdateInventorySuccess
    		failure UpdateInventoryFailure
    	}
    }

    transaction OrderCancelled inform {
    	sender {
    		message OrderCancelled
    	}
    }
    
    transaction OrderShipped inform {
    	sender {
    		message OrderShipped
    	}
    }
    
    /*
	 * A query is a two way transaction that has no side effects.
	 * There are two types of query: search and lookup.
	 *   A search takes explicitly supplied search criteria and returns an array of objects.
	 *   A lookup takes an object identifier and returns the object.
	 * By convention, they use the naming pattern Search<noun> and Lookup<noun>, respectively.
	 * By default, a query has no acknowledgements or retries.
	 */
 	transaction SearchOrder query
    {
        sender
        {
        	message SearchOrder
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	success SearchOrderSucceeded            
            failure SearchOrderFailed
        } 
    }
    
    /*
     * This transaction is a broadcast, as indicated by the presence of the broadcast keyword.
     * In a broadcast, the sender waits for the specified timeouts to expire, and then processes 
     *   all received messages, instead of sending a cancellation to abort the transaction.
     * Any messages received after the specified timeouts have expired are ignored by the sender.
     */
    transaction LookupOrder broadcast query
    {
        sender
        {
        	message LookupOrder
        	{
        		timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	success LookupOrderSucceeded
            failure LookupOrderFailed
        } 
    }
}