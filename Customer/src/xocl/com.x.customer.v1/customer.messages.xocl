	
package com.x.customer.v1{	
	import com.x.core.v1.*
	
	record UpsertCustomer{
		CustomerData data;
	}
	record UpsertCustomerSucceeded{
		Customer data;
	}
    record UpsertCustomerFailed{
		CustomerData data;
		array<Error> errors;	
	}
	
	enum Gender {
		MALE,
		FEMALE
	}
	
	record CustomerData confidential { 
		Name fullName ;	   //confidential        
	    array<Address>? addresses; //confidential  
		Phone? primaryPhone; //confidential  
		Email email;  //confidential  
		Gender? gender;
		datetime? dateOfBirth;
		string? company;
		datetime dateCreated;
		datetime lastModified;
		/** map of source system to source Id. This is used for audit purposes, to indicate where the customer came from in the flow */
	    map<string>? sourceIds;
	    
	    boolean? doNotCall;   
		boolean? emailOptOut;
	}  
	
    record Customer confidential extends CustomerData {
		union{guid, EntityId} id;   //id is created by the system that creates the record.	
	} 
	
	record SearchCustomer{
		
		/* When this field is present, get all customers modified since this date that also match the other criteria */
		datetime? modifiedSince;
		
		/**
		 * Restrict the number of items return to this many or less.
		 * When null, it is assumed there is no restriction
		 */
		long? itemsRequested;
		
		/**
		 * Return the results starting from this zero-based index.
		 * When null, items will be returned started from the first item
		 */
		long? startItemIndex;
		
		/*  */
	}
	
	record SearchCustomerSucceeded confidential{
		
	     array<Customer> customers;
		 long totalItemsFound;
		 SearchCustomer request;
	}
	
	record LookupCustomer {
        union{guid, EntityId} id 
    }
 
    record LookupCustomerSucceeded {
        Customer customer
    }
    
    record LookupCustomerFailed {
        union{guid, EntityId} id 
        array<Error> errors
    }

    record CustomerEmail{
		
		Email email;
		
		datetime lastModifiedDate;
		
		union{null,guid,EntityId} customerId = null;
	}
	
	record CustomerNameAndId{
		union{guid,EntityId} customerId;
		Name fullName ;	   //confidential, but not identifying by itself
		datetime lastModifiedDate;
	}
	

 	// NOTE: Email opt-out customers should not appear in this response.
	record SearchEmailCustomerSucceeded{
		array<CustomerEmail> customers;
		long totalItemsFound;
		SearchCustomer request;

	}
	
	record SearchNameAndIdCustomerSucceeded{
		array<CustomerNameAndId> customers;
		long totalItemsFound;
		SearchCustomer request;
	}
	
	record SearchCustomerFailed{
		SearchCustomer request;
		array<Error> errors;
	}
	
	record CustomerCreated{
		Customer data;
	}
	record CustomerUpdated{
		Customer data;
	}
		
}
	