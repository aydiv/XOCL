	
package com.x.customer.v1{	
	import com.x.core.v1.*
	
	record UpsertCustomer{
		CustomerData data;
	}
	record UpsertCustomerSucceeded{
		Customer data;
	}
    record UpsertCustomerFailed{
		CustomerData data;
		array<Error> errors;	
	}
	
	enum Gender {
		MALE,
		FEMALE
	}
	
	record CustomerData {  //TODO: Security annotations here.
		Name fullName;	         
	    array<Address>? addresses;
		Phone? primaryPhone;
		Email email; 
		Gender? gender;
		datetime? dateOfBirth;
		string? company;
		datetime dateCreated;
		datetime lastModified;
	}  
	
    record Customer extends CustomerData{
		guid id;   //GUID is created by the system that creates the record.	
	} 
	
	record SearchCustomer{
		
		/* When this field is present, get all customers modified since this date that also match the other criteria */
		datetime? modifiedSince;
		
		/**
		 * Restrict the number of items return to this many or less.
		 * When null, it is assumed there is no restriction
		 */
		long? itemsRequested;
		
		/**
		 * Return the results starting from this zero-based index.
		 * When null, items will be returned started from the first item
		 */
		long? startItemIndex;
		
		/*  */
	}
	
	record SearchCustomerSucceeded{
		
	     array<Customer> customers;
		 long totalItemsFound;
		 SearchCustomer request;
	}
	

    
    record CustomerEmail{
		
		Email email;
		
		datetime lastModifiedDate;
	}
	

 	// NOTE: Email opt-out customers should not appear in this response.
	record SearchEmailCustomerSucceeded{
		
		array<CustomerEmail> customers;
		long totalItemsFound;
		SearchCustomer request;

	}
	
	record SearchCustomerFailed{
		SearchCustomer request;
		array<Error> errors;
	}
	
	record CustomerCreated{
		Customer data;
	}
	record CustomerUpdated{
		Customer data;
	}
		
}
	