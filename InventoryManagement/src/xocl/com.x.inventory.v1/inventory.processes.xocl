package com.x.inventory.v1
{
	import com.x.inventory.v1.*
	
	process StockItemLookup 
	{
		summary "Retrieves specified stock items."
		description "The inventory consumer queries inventory levels and locations. This process is read-only. Stock item properties are not altered by this process."	
			
		roles
		{
			InventoryConsumer "The inventory consumer needs to know inventory details. In the context of the StockItemLookup process, the inventory consumer needs to understand stock item properties for uses in other business processes, such as the creation of a marketing offer."
			InventoryManager "The inventory manager maintains inventory stocking information and reports stocking information to inventory consumers and observers."
		}
		
		workflow 
		{
			summary "Retrieves inventory information."
			description "The inventory consumer queries inventory levels and locations."
			transaction LookupStockItem
			{
				roles(InventoryConsumer, InventoryManager)
			}
		}
	}
	
    process StockItemUpdate(StockItem stockItem)
    {
		summary "Updates stock items and reports on updates."
		description "The stock item consumer submits stock item updates to the inventory manager."
		
		roles
		{
			StockItemConsumer "The StockItemConsumer submits requests to update stock item details. "
			InventoryManager "The inventory manager services requests to update stock items and informs inventory observers of inventory updates and out-of-stock conditions."
			InventoryObserver "The inventory observer is like the inventory consumer. The inventory observer likes to be informed of inventory changes, but does not query for the information. In the context of the StockItemUpdate process, the inventory observer sends no messages, but gets informed of stock updates and when an item is out of stock."
		}
		
		preconditions(exists(stockItem))
	
		workflow
		{
			summary "Updates stock item."
			description "Optionally, the stock item consumer tells the inventory manager to update properties for one or more stock items. The inventory manager informs the inventory observer that stock item was updated (updates could occur through the messaging system or via the user interface), and, optionally, if an item is out of stock. The transactions defined in this workflow do not need to occur in a specific sequence."
			any
			{
				// Stock item consumer tells inventory manager to update stock item
				transaction UpdateStockItem
				{
				   	roles(StockItemConsumer, InventoryManager)
				}
			}
			
			// Inventory manager informs inventory observer that stock item was updated
			transaction StockItemUpdated
			{
				roles(InventoryManager, InventoryObserver)
			}

			any
			{
				// Inventory manager informs Inventory observer that item has gone out of stock
				transaction OutOfStock  
				{
					roles(InventoryManager, InventoryObserver)
				}
			}
		}
		
		postconditions
		{
			success(exists(stockItem))
		}
	}
}