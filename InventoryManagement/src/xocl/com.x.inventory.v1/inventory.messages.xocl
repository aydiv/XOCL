package com.x.inventory.v1
{
	import com.x.core.v1.*
	
    record StockItem 
	{
		summary "Stock item information that was retrieved."
		description "Contains the SKUs, quantity and location of a stock item."
		string sku "Standardized SKU (Stock Keeping Unit) of the product. This is a unique number per product and merchant.";
		int quantity "Number of stock items at a location. Note: Quantity is a high-consistency field due to serialization issues.";
		string locationName "Unique name used to reference the location of the stock item.";
	}
	
	record LookupStockItem
	{
		summary "Searches for stock items."
		description "Searches for one or more stock item by their SKU."
		array<string> skus "SKUs of the stock items to be retrieved.";
	}

	record LookupStockItemSucceeded
	{
		summary "Returns details for one or more stock items."
		description "Returns details for one or more stock items matching the submitted SKUs. A match must be found for every submitted SKU in order for the request to succeed."
		array<StockItem> stockItems "Stock items that were retrieved.";
	}
	
	record LookupStockItemFailed
	{
		summary "Error details for a failed attempt to find stock items."
		description "Signals that the request to find a stock item has failed. The failure message contains information about cause of the failure."
		array<InventoryLookupError> errors "Array of errors related to the failed search for stock items.";
	}
	
	record InventoryLookupError
	{
		summary "Stock item retrieval errors."
		description "Contains the errors related to searching for one or more stock items."
		string? sku "SKUs of the stock items involved in the failed search.";
		array<Error> errors "Array of errors related to the failed search.";
	}
	
   record InventoryError
	{
		summary "Stock item update errors."
		description "Contains errors related to updating a stock item. A way of grouping error information in StockItemFailed."
		StockItem? stockItem "One or more stock items involved in the failed update operation.";
		array<Error> errors "Array of errors related to the failed update operation.";
	}

    record StockItemUpdated
	{
		summary "Informs observers of changes for one or more stock items."
		description "Event sent to observers to inform them of a change in information for one or more stock items. Includes the array of updated stock items."
		array<StockItem> stockItems "Stock items whose information was successfully updated.";
	}

    record OutOfStock
	{
		summary "Informs observers that an inventory item is out of stock."
		description "Informs an Inventory Observer that a stock item quantity has gone to zero."
		StockItem stockItem "Informs an Inventory Observer that a stock item quantity has gone to zero.";
	}
	
	enum InventorySnapshotReason {
		summary "Specifies the reason for an inventory snapshot."
		description "Defines the values that can be used to specify the reason for an inventory snapshot."
		CYCLE_COUNT "Indicates the inventory snapshot was for a cycle count."
		DAMAGED_INVENTORY "Indicates the inventory snapshot was for damaged inventory."
		LIQUIDATION "Indicates the inventory snapshot was for a liquidation."
	}
	
	enum InventoryCondition {
		summary "Specifies the condition of an item."
		description "Defines the values that can be used to specify the condition of an item."
		SELLABLE "Indicates that the item is in sellable condition."
		UNSELLABLE "Indicates that the condition of the item makes the item unsellable."
	}
	
	record StockItemData {
		summary "Contains details of the stock items in the snapshot."
		description "Captures the SKU, quanity, and condition of the stock item in the snapshot."
		string sku "Standardized SKU (Stock Keeping Unit) of the product. This is a unique number supplied by the merchant."
		int unitQuantity "Amount of item in the stocking unit of measure. For example, if the UOM is per case and there are 12  items in a case, this value would be 12."
		string stockingUOM "Stocking unit of measure, such as units per case."
		InventoryCondition status "Condition of an item. Valid values are: SELLABLE and UNSELLABLE."	
	}
	
	record UpdateStockItemSnapshot {
		summary "Contains the information for updating the snapshot."
		description "Captures the date and time, reason, and location of the snapshot."
		StockItemData inventorySnapshot "Details of the stock item to update."
		datetime snapshotDate "Date and time the snapshot was done. The format is (ISO 8601): YYYY-MM-DDTHH:MMZ.;"
		InventorySnapshotReason snapshotReason "Reason the snapshot was done. Valid values are: CYCLE_COUNT, DAMAGED_INVENTORY, and LIQUIDATION."
		string locationName	"Location of where the snapshot is being taken."
	}
	
	record UpdateStockItemSnapshotSucceeded
	{
		summary "Details about the stock items that were updated."
		description "Returns stock items whose information is successfully updated."
		UpdateStockItemSnapshot request "Details of the stock items that were updated.";
	}
	
	record UpdateStockItemSnapshotFailed
	{
		summary "Signals that the updating stock item in a snapshot failed."
		description "Signals that a request to update information related a stock item in a snapshop has failed."
		UpdateStockItemSnapshot request "Stock items that were not updated.";
		array<Error> errors "Unique code that identifies the particular error condition that occurred and provides details about the failure that are useful for troubleshooting.";
	}
	
	record UpdateStockItemDelta {
		summary "Contains the information for updating the stock items."
		description "Captures date and time, inventory changes, and the warehouse identifier to in which to update the stock items."
		StockItemData inventoryChange "Details of the stock items that changed."
		datetime snapshotDate "Date and time the snapshot was updated. The format is (ISO 8601): YYYY-MM-DDTHH:MMZ.;"
		string warehouseId "The identifier of the warehouse where the inventory change occured."
	}
	
	record UpdateStockItemDeltaSucceeded
	{
		summary "Details about the stock items that were updated."
		description "Returns stock items whose information is successfully updated."
		UpdateStockItemDelta request "The request to update the stock item."
	}
	
	record UpdateStockItemDeltaFailed
	{
		summary "Error details for a failed attempt to update one or more stock items."
		description "Signals that a request to update information related to one or more stock items has failed."
		UpdateStockItemDelta request "The request to update the stock item."
		array<Error> errors "Unique code that identifies the particular error condition that occurred and provides details about the failure that are useful for troubleshooting."
	}
}