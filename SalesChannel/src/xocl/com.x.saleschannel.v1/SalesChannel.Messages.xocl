package com.x.saleschannel.v1{

	import com.x.core.v1.*


	record SiteMetadata extends Site {	
		array<SupportedHandlingTime>? handlingTimes;
		SupportedReturnPolicy? policy;
		array<SupportedShippingService>? services;
	    /** ISO 4217 3-letter currency codes */
		array<string> currencies;
	}
	 /*
		An environment represents a sub-section of the marketplace/site.
		The environment often defines the destination urls, credentails, etc for
		communicating with a given marketplace (ie 'production', 'sandbox', etc)
	*/
	 record Environment {
		string name;
	 }
	 
	 record SupportedCountry {
		string countryCode;
		string _AVDL_description;
	}
	
   record Site {	
		/** Depending on the channel, this can be 2-character country code from ISO 3166 */
		string siteCode;
		string siteName;
	}
	
	
	
    enum RefundMethod {
		MONEY_BACK,
		EXCHANGE_ONLY,
		STORE_CREDIT
	}
	enum RefundMethod {
		MONEY_BACK,
		EXCHANGE_ONLY,
		STORE_CREDIT
	}
	
    record SupportedReturnPolicy {
		boolean returnsAccepted;
		array<RefundMethod> method;
		int maxReturnByDays;
	}
    
    enum ShippingLocaleType {
		DOMESTIC,
		INTERNATIONAL
	}

	enum ShippingRateType {
		FLAT,
		CALCULATED,
		FREIGHT
	}
	
	
	record SupportedShippingService {
		string _AVDL_description;
		string? carrier = null; //USPS
		string serviceName; //i.e. USPSPriorityFlatRateBox
		int shippingTimeMaxInDays;
		int shippingTimeMinInDays;
		ShippingRateType? rateType;
		ShippingLocaleType localeType;  // Domestic or international
		
		boolean dimensionsRequired;
		boolean weightRequired;
		boolean surchargeApplicable;
	}
	
	record SupportedHandlingTime {
		int maxHandlingTime;  // in days
		string _AVDL_description;
	}
	
    enum CommonPaymentMethod {
		AMEX,
		CASH_ON_DELIVERY,
		CHECK,
		CREDIT_CARD,
		DINERS,
		DISCOVER,
		ESCROW,
		INTEGRATED_MERCHANT_CREDIT_CARD,
		MASTERCARD,
		MONEY_ORDER,
		MONEY_TRANSFER,
		MONEYBOOKERS,
		PAYMATE,
		PAYMENT_ON_PICKUP,
		PAYPAL,
		PROPAY,
		VISA
	}
	
	record PaymentMethod {
		//If the method is not a CommonPaymentMethod, use a string.
		union{CommonPaymentMethod,string} method;
	} 
	
    enum OfferState
	{
		NEW, //has not been published to the channel
		PUBLISHED, //published to the channel
		SUSPENDED //removed from the channel
	}

	
	/* Offer includes the channel-assigned state */
	record Offer {
		OfferChannelData channelData;
		OfferDetails offerDetails;	
	}
	
	record OfferChannelData{
		/** State of the offer */
		OfferState offerState;
	    string channelAssignedOfferId; //To be provided by channel provider
		string? channelOfferUrl; //To be provided by channel provider
		string? channelStatus; //To be provided by channel provider	
	}
	
	/* OfferData can be used to create an offer */
	record OfferDetails
	{
		/** The ID in the system that creates the offer  */
		string id;
		/** The channel this offer is for */
		string channelId;

		/** Reference to an object of type com.x.ocl.SKU */
		string sku;
		
		CurrencyAmount price;
		int quantity;

		/** Date Time Format: ISO 8601 */
		datetime? startTime;
	    
	    /** Date Time Format: ISO 8601 */
		datetime? endTime;
	}

	record Category {
		string id;
		string name;
		string? parentId;
		boolean? catalogEnabled;
		int? categoryLevel;
		boolean? leafCategory;
		string? categoryUrl;
	}
	
	record ReturnPolicy {
		string? _AVDL_description;
		boolean? returnAccepted;
		boolean? buyerPaysReturnShipping;
		int? returnByDays;
		RefundMethod? refundMethod;
	}
	
    record ShippingServiceOption {
		int sellerPriority;
		string serviceName;
		CurrencyAmount cost;
		CurrencyAmount? discountAmount;
		CurrencyAmount? additionalCost;
		CurrencyAmount? packagingHandlingCost;
		CurrencyAmount? surcharge ;  // UPS or FedEx to Alaska, Hawaii or Puerto Rico only.
		array<string>? shipToLocations;  // International shipping only
		array<string>? excludeShipToLocations;
	}

	/** Grouping of ShippingServiceOption by locale (domestic/international) and rate type. */
	record ShippingServiceOptionGroup {
		ShippingRateType rateType;  // Flat, calculated, etc
		ShippingLocaleType localeType;  // Domestic or international
		boolean applyPromotionalShippingRule;
		array<ShippingServiceOption> shippingServiceOptions;
	}
		/**
	 * Use this during profile creation or offer to indicate the type of shipping
	 * available for your offer.
	 */
	record ShippingPolicy {
		array<ShippingServiceOptionGroup> optionGroups;  // Domestic and/or international shipping
	}

	record PaymentPolicy {
		array<PaymentMethod>? acceptedPaymentTypes;
		boolean? immediatePaymentRequired;
		string? paymentInstructions;
	}

	record PolicyGroup extends PolicyGroupData{
        string id; //ID generated by the providing capability
	}


	record PolicyGroupData {
		string name; //Unique identifier to the tenant

		//Site the item should be listed to.  In most cases, this will be the ISO country code.
		string? siteCode;
		
		PaymentPolicy? payment;
		ShippingPolicy? shipping;
		ReturnPolicy? returnPolicy;
	}
	
    record OfferPublicationError {
		Offer? offer;
		array<Error> errors;
	}
	
    record OfferUpdateError {
		Offer offer;
		array<Error> errors;
	}

	record CancelOfferError {
		string offerId;
		array<Error> errors;
	}

	record GetAllAvailableChannel {

	}
	
    record GetAllAvailableChannelSucceeded {
		string channelName;
		string channelProviderName;
	    //Caller must get destination ID from header - X-XC-PUBLISHER-ID
	}

	record SearchSite {  //goes to a specific channnel
	
	}
	
    record SearchSiteSucceeded {
		array<Site> sites;
	}
	
    record SearchSiteFailed {
		array<Error> errors;
	}
	
	record LookupSiteMetadata {  
		array<string> siteCode
		string? environmentName
	}
	
	record LookupSiteMetadataSucceeded {  
		array<SiteMetadata> siteMetadata
		string? environmentName
	}

	
	record LookupSiteMetadataFailed {  
		array<string> siteCode
		string? environmentName
	}
	
	
    record SearchSiteSucceeded {
    	string? environmentName
		array<Site> sites;
	}
	
    record SearchSiteFailed {
    	string? environmentName
		array<Error> errors;
	}
	
	
	record SearchCategory {
		string? siteCode;
		string? xProductTypeId ;  
		string? environmentName ;
	}

	record SearchCategorySucceeded {
		array<Category>  categories; 
		string? siteCode = null;
		string? environmentName = null;
	}

	record SearchCategoryFailed {
		string? siteCode;
		string? environmentName;
		array<Error> errors;
	}
	
	
	
	record LookupPolicyGroup {
		string policyGroupId;
	}

	record LookupPolicyGroupSucceeded {
		PolicyGroup p;
	}

	
	record LookupPolicyGroupFailed {
		string policyGroupId;
		array<Error> errors;
	}
	
	record CreatePolicyGroup {
		PolicyGroupData p; 
	}

	record CreatePolicyGroupSucceeded {   
		PolicyGroup p; //id is filled in
	}
	
	record CreatePolicyGroupFailed {
		PolicyGroupData p;
		array<Error> errors;
	}
	
	record UpdatePolicyGroup {
		PolicyGroup p; //idd must be filled in
	}

	record UpdatePolicyGroupSucceeded {
		PolicyGroup p;
	}

	record UpdatePolicyGroupFailed {
		PolicyGroup p;
		array<Error> errors;
	}
	
	record DeletePolicyGroup {
		string policyGroupId;
	}

	record DeletePolicyGroupSucceeded {
		string policyGroupId;
	}

	record DeletePolicyGroupFailed {
		string policyGroupId;
		array<Error> errors;
	}
	
	record PublishOffer {
		OfferDetails offer; 
		string? policyGroupId;
	}

	record PublishOfferSucceeded { //Does not map 1:1 with request message - need to model this
		Offer offer;
		string? policyGroupId;
	}

	record PublishOfferFailed {
		OfferPublicationError error;
		string? policyGroupId;
	}


	record PublishMarketplaceOfferFailed {
		OfferPublicationError error;
		string? policyGroupId;
	}
	
	record RevisePublishedOffer {
		OfferDetails update; //must have channelOfferId
		string? policyGroupId;
	}

	record RevisePublishedOfferSucceeded {
		Offer updatedOffer; 
		string? policyGroupId;
	}
	
	record RevisePublishedOfferFailed {
		OfferUpdateError errors;
		string? policyGroupId;
	}
	
	record ReviseMarketplacePublishedOfferFailed {
		OfferUpdateError errors;
		string? policyGroupId;
	}
	
	record RevokePublishedOffer {
		string offerId;
		string? policyGroupId;
	}

	record RevokePublishedOfferSucceeded {
		string offerId;
		string? policyGroupId;
	}

	record RevokePublishedOfferFailed {
		CancelOfferError error;
		string? policyGroupId;
  	}
  	
	record OfferDeactivated {
		array<string> offerIds;
		string reason;
		string? policyGroupId = null;
	}

	
	record SearchOffer{
		array<string>? skus;
		datetime? startTime;
		datetime? endTime;
	}	
	record SearchOfferSucceeded{
		array<Offer> offers;
		datetime? startTime;
		datetime? endTime;
	}
	record SearchOfferFailed{
		array<string>? skus;
		datetime? startTime;
		datetime? endTime;
		array<Error> errors;
	}
}