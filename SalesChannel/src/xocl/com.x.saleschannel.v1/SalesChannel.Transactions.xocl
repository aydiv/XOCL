 
 package com.x.saleschannel.v1{
 	
 	import com.x.saleschannel.v1.*
 	import com.x.marketplace.v1.*
 	
 	entity PolicyGroup
    {
    	state New[Created]
    	state Created[Deleted]
    	state Deleted	
    }
    
     	
 	entity Offer
    {
    	state New[Created]
    	state Created[Deleted,Active]
    	state Active[Inactive]
    	state Deleted	
    	state Inactive
    }
    
    transaction GetAllAvailableChannel broadcast query
    {
        sender
        {
        	message GetAllAvailableChannel 
        	{
        		 timeouts(response=30s)
        		 //In a broadcast query, the client should wait for the entire timeout before assuming all available channels have responded     		
        	}
        }
        receiver
        {
        	success GetAllAvailableChannelSucceeded                 	
        	//No failure message in this case.  If the reciever cannot give channel/provider information, it should not return anything.  
        } 
    }
    
 	transaction SearchSite query
    {
        sender
        {
        	message SearchSite
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success SearchSiteSucceeded           
                    	
        	// A failure message does not have a response timeout
            failure SearchSiteFailed
        } 
    }
    
 	transaction LookupSiteMetadata<Marketplace> query
    {
        sender
        {
        	message LookupSiteMetadata
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success LookupSiteMetadataSucceeded   
        	
        	success<Marketplace> LookupMarketplaceSiteMetadataSucceeded        
                    	
        	// A failure message does not have a response timeout
            failure LookupSiteMetadataFailed
        } 
    }
    
    
   
    transaction SearchCategory query
    {
        sender
        {
        	message SearchCategory
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success SearchCategorySucceeded         
                    	
        	// A failure message does not have a response timeout
            failure SearchCategoryFailed
        } 
    }
    
    transaction CreatePolicyGroup<Marketplace> response
    {
        sender
        {
        	message CreatePolicyGroup
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message<Marketplace> CreateMarketplacePolicyGroup
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success CreatePolicyGroupSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            success<Marketplace> CreateMarketplacePolicyGroupSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure CreatePolicyGroupFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            failure<Marketplace> CreateMarketplacePolicyGroupFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
        }
    }
    
    transaction UpdatePolicyGroup<Marketplace> response
    {
        sender
        {
        	message UpdatePolicyGroup
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message<Marketplace> UpdateMarketplacePolicyGroup
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success UpdatePolicyGroupSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            success<Marketplace> UpdateMarketplacePolicyGroupSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdatePolicyGroupFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure<Marketplace> UpdateMarketplacePolicyGroupFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
        }
    }
    
    transaction DeletePolicyGroup response
    {
        sender
        {
        	message DeletePolicyGroup
        	{
        		timeouts(receipt=30s, response=3m)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success DeletePolicyGroupSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure DeletePolicyGroupFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
        }
    }
    
   
    
    transaction LookupPolicyGroup<Marketplace> query
    {
        sender
        {
        	message LookupPolicyGroup
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success LookupPolicyGroupSucceeded
        	           
            success<Marketplace> LookupMarketplacePolicyGroupSucceeded          	
                    	
        	// A failure message does not have a response timeout
            failure LookupPolicyGroupFailed
        } 
    }
    
   
    transaction OfferPublished<Marketplace> notify
    {
        sender
        {
        	message<Marketplace> MarketplaceOfferPublished
        	{
        		timeouts(receipt=30s)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
    }
    
    
    
    
    transaction PublishOffer<Marketplace> aggregate response
    {
        sender
        {
        	message PublishOffer
        	{
        		timeouts(receipt=30s, response=3h)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message<Marketplace> PublishMarketplaceOffer
        	{
        		timeouts(receipt=30s, response=3h)  		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	//PublishOffers may take some time, and N succeeded messages may be returned.
        	//Multiple requests may map to 1 response.   
        	success PublishOfferSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            success<Marketplace> PublishMarketplaceOfferSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            failure PublishOfferFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            failure<Marketplace> PublishMarketplaceOfferFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
        }
    }
    
    transaction RevisePublishedOffer<Marketplace> aggregate response
    {
        sender
        {
        	message RevisePublishedOffer
        	{
        		timeouts(receipt=30s, response=2h)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        	message<Marketplace> ReviseMarketplacePublishedOffer
        	{
        		timeouts(receipt=30s, response=2h)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success RevisePublishedOfferSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            success<Marketplace> ReviseMarketplacePublishedOfferSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure RevisePublishedOfferFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            failure<Marketplace> ReviseMarketplacePublishedOfferFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
        }
    }
    
    
    transaction OfferDeactivated notify
    {
        sender
        {
        	message OfferDeactivated{
        		timeouts(receipt=30s)   
        	}
        }
    }
            
    transaction RevokePublishedOffer aggregate response
    {
        sender
        {
        	message RevokePublishedOffer
        	{
        		timeouts(receipt=30s, response=2h)     		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response
        	success RevokePublishedOfferSucceeded
        	{
				// A success message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure RevokePublishedOfferFailed
            {
				// A failure message does not have a response timeout
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
        }
    }
    
    transaction SearchOffer<Marketplace> query
    {
        sender
        {
        	message SearchOffer
        	{
        		 timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// One of these two messages must be sent back to the sender as a response	
        	// A success message does not have a response timeout
        	success SearchOfferSucceeded   
        	success<Marketplace> SearchMarketplaceOfferSucceeded           
                    	        
                    	
        	// A failure message does not have a response timeout
            failure SearchOfferFailed
        } 
    }

    
}