// Definition of ecosystemmanagement transactions
package com.x.ecosystemmanagement.v1 {
	import com.x.ecosystemmanagement.v1.*
	
	// this is suppose to be a very simple transaction.  no fancy stuff.
	transaction PingCapability unicast response {
		description "A capability sends a Ping message to a different capability in hopes to receive a corresponding Pong message."
        sender
        {
        	message Ping
        	{
        		timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	success Pong
        	// failure MessageDeliveryFailed 
        } 
    }
    
    transaction UpdateCapabilityEndpoint unicast response {
    	description "A capability needs to update its URL where the Fabric delivers its messages."
        sender
        {
        	message UpdateCapabilityEndpoint
        	{
        		timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	// one of these two messages must be sent back to the sender as a response
        	success UpdateCapabilityEndpointSucceeded
            failure UpdateCapabilityEndpointFailed
        } 
    }
    
    // ------------------------------------------------------------------------
    // acquiring a bundle (can include onboarding a tenant)
    // ------------------------------------------------------------------------

	// TODO: should this be a "unicast" to force the request to the XManager?     
    transaction AcquireBundle response {
    	description "The AppStore requests the Fabric to aquire a specific bundle for the given tenant"
    	sender
    	{
    		message AcquireBundle
    	}
    	receiver
    	{
    		success AcquireBundleSucceeded
    		failure AcquireBundleFailed
    	}
    }
    
    transaction PerformContracts unicast response {
    	description "The Fabric requests that a capability perform its contracts for the given tenant"
    	sender
    	{
    		message PerformContracts
    	}
    	receiver 
    	{
    		success PerformContractsSucceeded
    		failure PerformContractsFailed
    	}
    }
    
    // TODO: (assuming there is *one* AppStore) mark as: unicast
    transaction CollectTenantCredentials response {
    	description "The Fabric requests that an AppStore collect credentials from a set of capabilities for a given tenant"
    	sender
    	{
    		message CollectTenantCredentials
    	}
    	receiver
    	{
    		success CollectTenantCredentialsSucceeded
    		failure CollectTenantCredentialsFailed  // TODO: what about partial failures?
    	}
    }
    
    transaction AcceptTenantRelationship unicast response {
    	description "The Fabric requests that a capability accept a new tenant relationship"
    	sender
    	{
    		message AcceptTenantRelationship
    	}
    	receiver
    	{
    		success AcceptTenantRelationshipSucceeded
    		failure AcceptTenantRelationshipFailed
    	}
    }
    
    
    // ------------------------------------------------------------------------
    // releasing a bundle
    // ------------------------------------------------------------------------

	// TODO: should this be a "unicast" to force the request to the XManager? 
	transaction ReleaseBundle response {
		description "The merchant or a capability requests the Fabric to remove its participation from a specific bundle"
    	sender
    	{
    		message ReleaseBundle
    	}
    	receiver
    	{
    		success ReleaseBundleSucceeded
    		failure ReleaseBundleFailed
    	}
	}
	
	transaction BundleInvalidated unicast notify {
		description "The XManager notifies a capability that its bundle participation is no longer valid"
		sender
		{
			message BundleInvalidated {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
        	}
		}
	}
}