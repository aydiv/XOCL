package com.x.ecosystemmanagement.v1 { 	
    import com.x.ecosystemmanagement.v1.*
    
    process PingPong {
		description "Verify that a capability is awake and addressable on the Fabric"
		
		roles
		{
			Pinger "Sender of a Ping message, who awaits for the Pong"
			Ponger "Responder using a Pong message"
		}
	
		workflow {
			summary "Pings a capability."
			transaction PingCapability {
				roles(Pinger, Ponger)
			}
		}
	}
	
	process UpdateCapabilityEndpoint {
		description "Configure the endpoint URL setting for a capability"
		
		roles
		{
			Capability "The capability can inform the Fabric that it has a new endpoint URL."
			XManager "The special capability that manages the Fabric."
		}
	
		workflow {
			summary "Configure a capability's endpoint URL setting."
			transaction UpdateCapabilityEndpoint {
				roles(Capability,XManager)
			}
		}
	}
	
	// TODO: maybe this is really "BindBundle" or "AcquireBundle" ?
	process OnboardTenant {
		description "Have one or more capabilities perform services for a given tenant"
		
		roles
		{
			XManager
			AppStore
			Capability
		}
		
		workflow {
			// occurs once per bundle
			transaction AcquireBundle {
				roles(AppStore,XManager)
			}
			
			// TODO: this transaction really needs to live within the preceeding one
			// TODO: how do i mark this as occuring 1+ times?
			// occurs one or more times
			transaction PerformContracts {
				roles(XManager,Capability)
			}
		}
	}
	
	process AuthenticateTenant {
		description "Have one or more capabilities authenticate a given tenant"
		
		roles
		{
			XManager
			AppStore
			Capability
		}
		
		workflow {
			// occurs once
			transaction CollectTenantCredentials {
				roles(XManager,AppStore)
			}
			
			// TODO: this transaction really needs to live within the preceeding one
			// TODO: how do i mark this as occuring 1+ times?
			// occurs one or more times
			transaction AcceptTenantRelationship {
				roles(XManager,Capability)
			}
		}
	}
	
	// TODO: maybe this is really "OffboardTenant" ?
	process OffboardBundle {
		description "Tear down a bundle since one of its participants no longer wishes to be part of it"
		
		roles
		{
			XManager
			AppStore
			Capability
		}
		
		workflow {
			// just one of the following is allowed
			one {
				// used on behalf of the merchant 
				transaction ReleaseBundle {
					roles(AppStore,XManager)
				}
				// used on behalf of a capability
				transaction ReleaseBundle {
					roles(Capability,XManager)
				}
			}

			// Notify any others that the bundle is gone
			
			// TODO: this transaction really needs to live within the preceeding one
			// TODO: how do i mark each of these as occuring 0+ times?
			
			transaction BundleInvalidated {
				roles(XManager,Capability)
			}
			transaction BundleInvalidated {
				roles(XManager,AppStore)
			}

		}
	}

}