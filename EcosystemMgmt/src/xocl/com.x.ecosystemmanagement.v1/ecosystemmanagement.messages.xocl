// Definition of the general-use, ecosystemmanagement level messages.

// Note: The use of MAY, MUST, OPTIONAL, etc, in all caps are used to indicate
// implementation expectations.  This is similar to standard RFC word usage.

// All capabilities MUST implement both Ping and Pong messages
// (that is, accept Ping as an incoming message, and respond with a Pong).
//
// Capabilities SHOULD also accept MessageDeliveryFailed messages.  A capability
// which does not accept the message MUST drop it.  A capability which does
// accept the message MUST NOT respond with another MessageDeliveryFailed
// message.

// TODO: what if just one of the messages below needs to be changed/versioned --
// does that mean that *all* of the messages are forced to go to version++ ??
package com.x.ecosystemmanagement.v1 {
	import com.x.ecosystemmanagement.v1.* 
	import com.x.core.v1.*

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	// Ping message for testing a capability's ability to receive messages.
	// To use this message the sender MUST share a tenant with the recipient
	// (as for any message) and MUST also specify a Destination ID header to
	// avoid sending to every capability (versus the one intended).
	//
	// The payload is OPTIONAL for the sender.  If the recipient gets a Ping
	// with a payload, then the corresponding Pong MUST contain that same
	// payload.
	//
	record Ping {
		string? payload  // Optional, copied to pong, if present
	}

	// Pong message for responding to pings.  All capabilities MUST respond to
	// a Ping message with a Pong message, and MUST copy any payload present
	// from the Ping to the Pong.  The responding capability MUST not alter the
	// payload in this process.
	//
	record Pong {
		string? payload  // Must be copied from ping (verbatim), if present
	}

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	// Message Delivery Failure notification.  This message indicates that a
	// message was not delivered to one or more listening capabilities.  A
	// Capability MAY also choose to send this notification if it cannot parse
	// a message or cannot execute any business logic to do issues with a
	// message.  Business level errors MUST NOT use this message and MUST use
	// the appropriate business-level error instead.  For example, an UpdateFoo
	// message which cannot be updated would send UpdateFooFailed.
	//
	// Error Ids:
	// 100-199 Range: Did not attempt to deliver message (no httpStatus)
	// - 100: No Recipients - No capabilities are subscribed to topic
	// - 101: Recipient Not Enabled - The Recipient's endpoint url has not
	//        been specified
	//
	// 200-299 Range: Connection error during delivery (no httpStatus)
	// - 200: General delivery exception - Delivery failed for reasons other
	//        than one of the other reasons in this range
	// - 201: Connection refused
	// - 202: Connection timed out
	// - 203: Message timeout - Message timed out during read or write
	//
	// 300-399 Range: Message delivery rejected by receiver (httpStatus provided)
	// - 300: Message Rejected - httpStatus contains status code, and errorCause
	//        contains the status line.
	//
	// 400-499 Range: Message delivered but failed in process (no httpStatus)
	// Messages TBD
	//
	//
	// Note to app developers, do not respond to a /message/failed message
	// with another /message/failed message.
	record MessageDeliveryFailed {
		string topicName            // topic of the problem message
		int errorId                 // Error id, as described above
		int? httpStatus             // Http Status if available or null if another type of error
		string errorCause           // Http Status line message or cause of delivery failure
		string messageGuid          // GUID, as above
		bytes? _AVDL_message        // Original message body
	}

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	// --------------------------
	// Update Capability Endpoint
	// --------------------------
	
	// sent from a Capability to the XManager
	record UpdateCapabilityEndpoint {
		string endpoint   // send an empty string to disable the capability
	}
	
	// "success" - sent to the Capability at the new endpoint, listed within the message
	record CapabilityEndpointUpdated {
		string endpoint   // as was sent in the request
	}
	
	// "failure" - sent to the Capability using the endpoint before any changes were made
	record UpdateCapabilityEndpointFailed {
		string endpoint   // as was sent in the request
		string _AVDL_message    // reason
	}

	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	// TODO: verify how to specify a contract	
		
	// ------------------------
	// beans: Tenant onboarding
	// ------------------------
	record ContractImpl {
		summary "For a given Capability, list of contracts it implements for a particular bundle"
		string        destinationId  // the capability
		string        bundleName     // TODO: maybe this is optional?
		array<string> contractIds    // the contracts the capability implements for this bundle
	}
	
	record TenantCredentials {
		summary "For a given Capability, map of <onboardingKey, onboardingValue> entries."
		string      destinationId     // the capability
		map<string> tenantOnboarding  // <onboardingKey, onboardingValue>
	}
	
	// -------------------------------------
	// Acquiring a bundle for a given tenant
	// -------------------------------------
	
	// sent from the AppStore to the XManager
	record AcquireBundle {
		// note that the X-XC-TENANT-ID header has the AppStore's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string              tenantPseudonym  // as seen from the point-of-view of the AppStore
		string              bundleName
		array<ContractImpl> contractImpls 
		// FUTURE? array<TenantCredentials> setOfTenantCredentials  // the onboardingValues are filled in 
	}
	
	// "success" - sent from the XManager to the AppStore
	record BundleAcquired {
		// note that the X-XC-TENANT-ID header has the AppStore's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string  tenantPseudonym  // as seen from the point-of-view of the AppStore
		string  bundleName
	}
	
	// "failure" - sent from the XManager to the AppStore	
	record AcquireBundleFailed {
		// note that the X-XC-TENANT-ID header has the AppStore's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string  tenantPseudonym  // as seen from the point-of-view of the AppStore
		string  bundleName
		string? reason  // an explanation
		// TODO: do we need a list of failed contractImpls?
	}
	
	// ----------------------------------------------------
	// Agreeing to perform a contract(s) for a given tenant
	// ----------------------------------------------------
	
	// sent from the XManager to a Capability
	record PerformContracts {
		// note that the X-XC-TENANT-ID header has the Capability's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string        tenantPseudonym  // as seen from the point-of-view of the Capability
		string        tenantName       // friendly / pretty name
		string        bundleName
		array<string> contractIds      // the contracts the capability implements  TODO: optional?
	}
	
	// sent from a Capability to the XManager
	record ContractsPerformed {
		// note that the X-XC-TENANT-ID header has the Capability's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string  tenantPseudonym  // as seen from the point-of-view of the Capability
		string  bundleName
	}
	
	// "failure" - sent from a Capability to the XManager
	record PerformContractsFailed {
		// note that the X-XC-TENANT-ID header has the Capability's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string  tenantPseudonym     // as seen from the point-of-view of the Capability
		string  bundleName
		string? reason              // an explanation
		array<string>? contractIds  // the contracts the capability will *not* perform  TODO: needed?
	}
	
	// ----------------------------------------------------------------------------------------------
	// New Tenant Authorization: Collection of onboarding values (for 1+ Capabilities simultaneously)
	// ----------------------------------------------------------------------------------------------

	// sent from the XManager to AppStore
	record CollectTenantCredentials {
		// note that the X-XC-TENANT-ID header has the AppStore's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string  tenantPseudonym  // as seen from the point-of-view of the AppStore
		string  tenantName       // friendly / pretty name
		array<TenantCredentials> setOfTenantCredentials  // the onboardingValues are empty
	}
	
	// "success" - sent from AppStore to the XManager
	record TenantCredentialsCollected {
		// note that the X-XC-TENANT-ID header has the AppStore's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string  tenantPseudonym  // as seen from the point-of-view of the AppStore
		array<TenantCredentials> setOfTenantCredentials  // the onboardingValues are filled in
	}
	
	// "failure" - sent from AppStore to the XManager
	record CollectTenantCredentialsFailed {
		// note that the X-XC-TENANT-ID header has the AppStore's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string  tenantPseudonym  // as seen from the point-of-view of the AppStore
		array<TenantCredentials>? setOfTenantCredentials  // list of failed TenantCredentials
	}
	
	// ------------------------------------------------------------------------------------------------------------------
	// New Tenant Authorization: A capability accepts a tenant relationship (typically based on the credentials provided)
	// ------------------------------------------------------------------------------------------------------------------
	
	// sent from XManager to a specific Capability
	record AcceptTenantRelationship {
		// (in the ontology world, this was the TenantRelationshipCreated message)
		// note that the X-XC-TENANT-ID header has the receiving capability's self-tenant identifier
		// (and *not* the tenant pseudonymn within the message, below)
		string      tenantPseudonym  // value of what my future X-XC-TENANT-ID header will carry when I receive a message for this tenant
		string      bearerToken      // value I need to use in my auth header when sending a message on behalf of this tenant
		string      tenantName       // friendly / pretty name
		map<string> onboarding       // additional key/value pairs that can be used to identify or complete the tenant relationship
	}
	
	// "success" - sent from a Capability to the XManager
	record TenantRelationshipAccepted {
		string  tenantPseudonym
	}
	
	// "failure" - sent from a Capability to the XManager	
	record AcceptTenantRelationshipFailed {
		string  tenantPseudonym
		string? reason  // an explanation
	}

}
	
