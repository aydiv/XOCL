/** This file includes the transactions that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	import com.x.ordermanagement.v2.*
	
	// Notify fulfillment system that order needs to be fullfilled
	transaction FulfillOrder notify {
		sender
		{
			message FulfillOrder {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}
	}
	
	// Used to notify retailer of shipment details 
	transaction OrderAction notify {
    	sender {
    		message OrderAction {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
	
	// Used to notify fulfillment system or retailer of changes in fullfillment action 
	transaction OrderComment notify {
    	sender {
    		message OrderComment {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
    // Used to notify retailer that order was fulfilled 
	transaction OrderShipped(Order) notify {
    	sender {
    		message OrderShipped {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
        // Used to notify retailer that order was fulfilled 
	transaction OrderShipped notify {
    	sender {
    		message OrderShipped {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
    // Cancel the order entirely
	transaction CancelOrder(Order order) response {
        sender {
        	message CancelOrder {
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        }
        receiver {
        	success CancelOrderSucceeded {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }         
            
            failure CancelOrderFailed
        }
		postconditions {
			success(order[Order.Cancelled])
		}
    }
    
     // Cancel parts of the order
	transaction CancelPartialOrder(array<OrderLineData> orderLines) response {
        sender {
        	message CancelPartialOrder {
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        }
        receiver {
        	success CancelPartialOrderSucceeded {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }         
            
            failure CancelOrderFailed
        }
		postconditions {
			success(orderLines[][Order.Cancelled])
		}
    }
    
    
    
    
}