/** This file includes the transactions that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	
	// Notify fulfillment system that order needs to be fullfilled
	transaction FulfillOrder(Fulfillment fulfillment) notify {
		sender
		{
			message FulfillOrder {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}		
	 	postconditions {
	 		success(fulfillment[Fulfillment.Created])	 		
	 	}
	}	
	
	// Variant for dropship fulfillment
	transaction FulfillOrder<DropShip>(Fulfillment fulfillment) notify {
		sender
		{
			message FulfillDropshipOrder {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}		
	 	postconditions {
	 		success(fulfillment[Fulfillment.Created])	 		
	 	}
	}
	
	// Notify order management system that order is fullfilled
	transaction OrderFulfilled(Fulfillment fulfillment) notify {
    	preconditions(fulfillment[Fulfillment.Cancelled], fulfillment[Fulfillment.Shipped])
    	sender
		{
			message OrderFulfilled {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}
    }
	
	
	// Used to notify retailer of changes to expected shipping date
	transaction ItemExpectedShipDate notify {
    	sender {
    		message ItemExpectedShipDate {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
	
	
	transaction DropShipSupplierComment notify {
    	sender {
    		message DropShipSupplierComment {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
    
	transaction MerchantComment notify {
    	sender {
    		message MerchantComment {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
    // Used to notify retailer that item was shipped 
	transaction ItemShipped notify {		
    	sender {
    		message ItemShipped {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }    
     
     // Cancel parts of the order
	transaction ItemCancelled notify {
        sender {
        	message ItemCancelled {
        		timeouts(receipt=30s, validation=3m)     		
        		retries=3
        	}
        }
    }
    
    transaction LookupShippingRate response {
    	sender {
    		message LookupShippingRate{
    			timeouts(response=30s)   
    		}
    	}
    	receiver {
        	success LookupShippingRateSucceeded  
        	failure LookupShippingRateFailed
        }
    }
    
    transaction HoldFulfillment(Fulfillment fulfillment) notify {
    	sender{
    		message FulfillmentHold{
    			timeouts(receipt=30s, validation=3m)     		
        		retries=3
    		}
    	}
    	postconditions {
			success(fulfillment[Fulfillment.OnHold])
		}
    }
    
    transaction ReleaseFulfillment(Fulfillment fulfillment) notify {
    	sender{
    		message FulfillmentRelease{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    	postconditions {
			success(fulfillment[Fulfillment.Released])
		}
    }
    
    transaction FulfillmentInformationUpdate notify {
    	sender{
    		message FulfillmentInformationUpdate{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    transaction LookupFulfillments query {
    	sender {
    		message LookupFulfillments{
    			timeouts(response=30s)   
    		}
    	}
    	receiver {
        	success LookupFulfillmentsSucceeded   
        	failure LookupFulfillmentsFailed
        }
    }
    
    transaction CancelFulfillment notify {
    	sender{
    		message CancelFulfillment{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    transaction CreateReceiving(Receiving receiving) notify {
    	sender{
    		message CreateReceiving{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    	postconditions {
	 		success(receiving[Receiving.Created])	 		
	 	}
    }
    
    transaction UpdateReceiving notify {
    	sender{
    		message UpdateReceiving{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    transaction ReceivedUpdate notify {
    	sender{
    		message ReceivedUpdate{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    transaction ReceivingComplete notify {
    	sender{
    		message ReceivingComplete{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
     transaction CancelReceiving notify {
    	sender{
    		message CancelReceiving{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    transaction LookupReceived query {
    	sender {
    		message LookupReceived{
    			timeouts(response=30s)   
    		}
    	}
    	receiver {
        	success LookupReceivedSuceeded
        	failure LookupReceivedFailed
        }
    }
    

}