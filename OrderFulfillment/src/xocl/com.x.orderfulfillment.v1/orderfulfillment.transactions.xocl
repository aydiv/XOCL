/** This file includes the transactions that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	
	// Notifies that a dropship fulfillment needs to be processed
	transaction ProcessDropshipFulfillment(Fulfillment fulfillment) notify {
		sender
		{	
			message ProcessDropshipFulfillment {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}		
	 	postconditions {
	 		success(fulfillment[Fulfillment.Created])	 		
	 	}
	}
	
	// Notifies third party fulfillment needs to be processed
	transaction ProcessThirdPartyFulfillment(Fulfillment fulfillment) notify {
		sender
		{	
			message ProcessThirdPartyFulfillment {   
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }            
        }		
	 	postconditions {
	 		success(fulfillment[Fulfillment.Created])	 		
	 	}
		
	}	
	
	// Notifies that fulfillment processing was completed
	transaction FulfillmentCompleted(Fulfillment fulfillment) notify {
    	preconditions(fulfillment[Fulfillment.Cancelled], fulfillment[Fulfillment.Shipped])
    	sender
		{
			message FulfillmentCompleted {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}
		postconditions {
	 		success(fulfillment[Fulfillment.Complete])	 		
	 	}
    }
	
	
	// Notifies that expected ship date got updated for part/whole of Fulfillment  
	transaction FulfillmentExpectedShipDateUpdated notify {
    	sender {
    		message FulfillmentExpectedShipDateUpdated {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
	
	//Notifies a drop ship suppliers comment
	transaction DropShipSupplierComment notify {
    	sender {
    		message DropShipSupplierComment {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
    //Notifies a merchants comment
	transaction MerchantComment notify {
    	sender {
    		message MerchantComment {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
    // Notifies that part/whole of Fulfillment was shipped 
	transaction FulfillmentShipped notify {		
    	sender {
    		message FulfillmentShipped {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }    
     
     // Notifies that part/whole of Fulfillment was cancelled 
	transaction FulfillmentCancelled notify {
        sender {
        	message FulfillmentCancelled {
        		timeouts(receipt=30s, validation=3m)     		
        		retries=3
        	}
        }
    }
    
    // A query to look up the shipping rate for a fulfillment 
    transaction SearchShippingRate query {
    	sender {
    		message SearchShippingRate{
    			timeouts(response=30s)   
    		}
    	}
    	receiver {
        	success SearchShippingRateSucceeded  
        	failure SearchShippingRateFailed
        }
    }

    transaction MerchantHoldFulfillment(Fulfillment fulfillment) notify {
    	description "Notifies that whole/parts of fulfillment should be held from further processing"
    	sender{
    		message MerchantHoldFulfillment{
    			timeouts(receipt=30s, validation=3m)     		
        		retries=3
    		}
    	}
    }
    
        // Notifies that whole/parts of fulfillment should be held from further processing
    transaction FulfillmentProcessorHoldFulfillment(Fulfillment fulfillment) notify {
    	description "Notifies that whole/parts of fulfillment should be held from further processing"
    	sender{
    		message FulfillmentProcessorHoldFulfillment{
    			timeouts(receipt=30s, validation=3m)     		
        		retries=3
    		}
    	}
    }
    
    // Notifies that whole/parts of fulfillment should be released for further processing
    transaction ReleaseFulfillment(Fulfillment fulfillment) notify {
    	sender{
    		message ReleaseFulfillment{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    // Notifies that information got updated for whole/parts of fulfillment
    transaction FulfillmentInformationUpdated notify {
    	sender{
    		message FulfillmentInformationUpdated{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    // A query to look up all fulfillments for a order number 
    transaction LookupFulfillments query {
    	sender {
    		message LookupFulfillments{
    			timeouts(response=30s)   
    		}
    	}
    	receiver {
        	success LookupFulfillmentsSucceeded   
        	failure LookupFulfillmentsFailed
        }
    }
    
    // Notifies that whole/parts of fulfillment should be cancelled
    transaction CancelFulfillment notify {
    	sender{
    		message CancelFulfillment{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    // Notifies that data pertaining to future expected inventory a.k.a receiving should be processed
    transaction ProcessReceiving(Receiving receiving) notify {
    	sender{
    		message ProcessReceiving{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    	postconditions {
	 		success(receiving[Receiving.Created])	 		
	 	}
    }
    
    //Notifies that previously provided information for receiving should be updated
    transaction UpdateReceiving notify {
    	sender{
    		message UpdateReceiving{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    //Notifies that status got updated for all/part of receiving inventory
    transaction ReceivingInventoryStatusUpdated notify {
    	sender{
    		message ReceivingInventoryStatusUpdated{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    //Notifies that processing of receiving got completed
    transaction ReceivingCompleted(Receiving receiving) notify {
    	sender{
    		message ReceivingCompleted{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    	postconditions {
	 		success(receiving[Receiving.Created])	 		
	 	}
    }
    
     //Notifies that whole/part of inventory should be cancelled
     transaction CancelReceiving notify {
    	sender{
    		message CancelReceiving{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    //A query to lookup receivings for a purchase order number
    transaction LookupReceivings query {
    	sender {
    		message LookupReceivings{
    			timeouts(response=30s)   
    		}
    	}
    	receiver {
        	success LookupReceivingsSuceeded
        	failure LookupReceivingsFailed
        }
    }
    
     //Notifies of a return advance shipping notice that needs to be processed
     transaction ProcessReturnAdvanceShipmentNotice notify {
    	sender{
    		message ProcessReturnAdvanceShipmentNotice{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    //Notifies of a return ASN previously sent that needs to be updated
    transaction UpdateReturnAdvanceShipmentNotice (Return returns) notify {
    	preconditions (returns[Return.Expected])
    	sender{
    		message UpdateReturnAdvanceShipmentNotice{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    //Notifies of a return ASN previously sent that needs to be cancelled
    transaction CancelReturnAdvanceShipmentNotice (Return returns) notify {
    	preconditions (returns[Return.Expected])
    	sender{
    		message CancelReturnAdvanceShipmentNotice{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    	postconditions {
          	success(returns[Return.Cancelled])          		
        }
    }
    
    //Notifies that product was returned with or without ASN
    transaction ReturnReceived notify {
    	sender{
    		message ReturnReceived{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    //Notifies that returns processing is complete
    transaction ReturnProcessCompleted(Return returns) notify {
    	preconditions (returns[Return.Cancelled], returns[Return.Received])
    	sender{
    		message ReturnProcessCompleted{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    	postconditions {
          	success(returns[Return.Complete])          		
        }
    }
    
    //Notifies a snapshot inventory numbers for a client was taken
    transaction UpdateInventorySnapshot notify {
    	sender{
    		message UpdateInventorySnapshot{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    
    transaction UpdateInventoryDelta notify {
    	sender{
    		message UpdateInventoryDelta{
    			timeouts(receipt=30s, validation=3m) 
    		}
    	}
    }
    

}