/** This file includes the transactions that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	
	// Notify fulfillment system that order needs to be fullfilled
	transaction FulfillOrder(Order order) notify {
		preconditions(order[Order.Created])
		sender
		{
			message FulfillOrder {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}
	}
	
	// Notify order management system that order is fullfilled
	transaction OrderFulfilled(Order order) notify {
    	preconditions(order[Order.Cancelled], order[Order.Shipped])
    	sender
		{
			message OrderFulfilled {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}
    }
	
	
	// Used to notify retailer of changes to expected shipping date
	transaction ItemExpectedShipDate notify {
    	sender {
    		message ItemExpectedShipDate {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
	
	
	transaction DropShipSupplierComment notify {
    	sender {
    		message DropShipSupplierComment {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
    
	transaction MerchantComment notify {
    	sender {
    		message MerchantComment {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
    // Used to notify retailer that item was shipped 
	transaction ItemShipped notify {		
    	sender {
    		message ItemShipped {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
    	}
    }
    
     
     // Cancel parts of the order
	transaction ItemCancelled notify {
        sender {
        	message ItemCancelled {
        		timeouts(receipt=30s, validation=3m)     		
        		retries=3
        	}
        }
    }

}