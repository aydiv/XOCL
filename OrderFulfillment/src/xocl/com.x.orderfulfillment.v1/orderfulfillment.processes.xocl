/** This file includes the processes that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	
	// Entity that represents the various states of a fulfillment order
    entity Fulfillment
    {
        state Created [OnHold, Shipped, Cancelled]
        // reached when all of the uncancelled/unshipped items are put on hold
        state OnHold [Released]
        // reached when all of the uncancelled/unshipped items are released from hold
        state Released [Shipped, Cancelled]
        // reached when all the uncancelled items get shipped
        state Shipped [Complete]
        // reached when all items get cancelled
        state Cancelled [Complete]
        // reached if all of the uncancelled items are shipped or cancelled
        state Complete
    } 
    
    // Entity that represents the various states of inventory that is expected to be received <a.k.a receiving>
    entity Receiving
    {
    	state Created [Cancelled, Received, PutAway, Complete]
    	//reached if all of the receiving is cancelled
    	state Cancelled [Complete]
    	//reached if all of the uncancelled receiving is received
    	state Received [PutAway]
    	//reached if all of the uncancelled delivered receiving is putaway
    	state PutAway [Complete]
    	//reached if all of the uncancelled receiving is putaway or cancelled
    	state Complete
    }
    
     //Represents the state machine for returns initated for fulfillments that are completed
	 entity Return {
	 	//Beginning state. Triggered when return ASN is received
	  	state Expected [Cancelled, Received]
    	//reached if after a ASN was sent, the return ASN is cancelled
    	state Cancelled [Complete]
    	//reached if the return is received with ASN or some return is received unexpectedly
    	// It is possible to begin with this state
    	state Received [Complete]
    	//reached if entire return is in Cancelled or Received state
    	state Complete
	 }
   
	process DropshipFulfillmentProcessing (Fulfillment fulfillment) {	
	 description "An order is submitted to dropshipper for fulfillment and is either shipped or cancelled"
	 
	 	roles(OrderProcessor, DropshipProcessor)
        
	        workflow {
	 	 	
	 	 	// An dropshipper is asked to fulfill all or parts of an order 	 	 
	 	 	transaction ProcessDropshipFulfillment {
	        	roles(OrderProcessor, DropshipProcessor)
	    	}
	    	
	 	    do(!fulfillment[Fulfillment.Complete]) {	 	    		 	    	
		 	 	any {
		 	 			 	 		
			 	 	transaction FulfillmentExpectedShipDateUpdated {
		        		roles(DropshipProcessor, OrderProcessor)
		        	}
		        	
		        	transaction DropShipSupplierComment {
		        		roles(DropshipProcessor, OrderProcessor)
		        	}
		        	
		        	transaction MerchantComment {
		        		roles(OrderProcessor, DropshipProcessor)
		        	}
		        	//A supplier may cancel all/parts of the fulfillment
	    			transaction FulfillmentCancelled {
	        			roles(DropshipProcessor, OrderProcessor)
	        		}
	        	
	    			transaction FulfillmentShipped {
	    				roles(DropshipProcessor, OrderProcessor)
	    			}
	    			
	    			transaction FulfillmentCompleted {
			 			roles(DropshipProcessor, OrderProcessor)
			 		}	        		
	        	} 		
	    	}        	
	    	
	 	}
	 	postconditions {
          	success(fulfillment[Fulfillment.Complete])          		
        }
     }
	 	
 	 
 	process ThirdPartyFulfillmentProcessing (Fulfillment fulfillment) {		
	 description "An order is submitted to third party for fulfillment and is either shipped or cancelled"
	 
	 	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
 		 workflow{		
 	 	
	 	 	// A merchant wants to direct a fulfillment provider to ship all or part of an order to an end customer
	 	 	transaction ProcessThirdPartyFulfillment {
	        	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	    	}
	    	
	 	    do(!fulfillment[Fulfillment.Complete]) {	 	     //is there a timeout?  		 	    	
		 	 	any {		 	 			 		
			 	 	//A merchant wants to hold a shipment to prevent it from shipping temporarily
			 	 	transaction HoldFulfillment {
			 	 		roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
			 	 	}
			 	 	
			 	 	//A merchant wants to release a shipment previously held
			 	 	transaction ReleaseFulfillment {
			 	 		roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
			 	 	}
		        	
	    			//A merchant may choose to cancel fulfillment in progress		
	    			transaction CancelFulfillment {
	        			roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	        		}
	        		
	        		//A merchant may choose to lookup all fulfillments for an order
	        		transaction LookupFulfillments {
	        			roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	        		}
	        		
	        		//A merchant is informed of changes to a fulfillment’s status as they occur, such as when the order is picked, ready for shipment, or tendered to a shipping carrier
	        		transaction FulfillmentInformationUpdated {
	        			roles(ThirdPartyFulfillmentProcessor, OrderProcessor)
	        		}
	        	
	    			//merchant is notified as shipments for the fulfillment order get shipped
	        		transaction FulfillmentShipped {
	    				roles(ThirdPartyFulfillmentProcessor, OrderProcessor)
	    			}	
	    			
	    			transaction FulfillmentCompleted {
		 				roles(ThirdPartyFulfillmentProcessor, OrderProcessor)		 			
	    			}	        		
	        	}	        	 
    		}  	
    	}
    	postconditions {
          	success(fulfillment[Fulfillment.Complete])   
    	} 	
	 }
	 	
	 
	 
	 process ShippingRateSearch {
	 	description "A merchant requests for shipping quotes for a fulfillment order"	 
	 	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	 	workflow { 
	 	 	transaction SearchShippingRate {
	        	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
        	}        	
        }
	 }
	 
	 
	 process ReceivingProcessing (Receiving receiving) {
	 	description "A merchant notifies a fulfillment provider of a future inventory receipt. The fulfillment provider notifies when the receipt is processed (received, put away)"
	 	roles(InventorySupplier, ReceivingProcessor, ReceivingObserver)
	 	workflow {
		 	transaction ProcessReceiving {
		 		roles(InventorySupplier, ReceivingProcessor)
		 	}
		 	
		 	do(!receiving[Receiving.Complete]) {	 
		 		any {
		 		   //A merchant wants to give updated information about a previously communicated receiving
		 		   //such as expected date, carrier being used, tracking number, or packaging information
			 		transaction UpdateReceiving {
			 			roles (InventorySupplier, ReceivingProcessor)
			 		}
			 		//A merchant wants to lookup receiving by purchase order number
			 		transaction LookupReceivings {
			 			roles (InventorySupplier, ReceivingProcessor)
			 		}
			 		//Notification to merchant when inventory status is updated
			 		transaction ReceivingInventoryStatusUpdated {
			 			roles (ReceivingProcessor, ReceivingObserver)
			 		}
			 		//A merchant wants to cancel receiving
			 		transaction CancelReceiving{
			 			roles (InventorySupplier, ReceivingProcessor)			 			
			 		}
			 		//Merchant is informed that receiving is completed
			 		transaction ReceivingCompleted {
			 			roles (ReceivingProcessor, ReceivingObserver)
			 		}			 		
		 		}		 		
		 	}		 		
		 }
		 postconditions {
          	success(receiving[Receiving.Complete])          		
        }		 
	 }
	 
	 process ReturnReceiptProcessing (Return return) {
	 	description "Return is initiated by customer directly so that first intimation of return is its receipt"
	 	roles(FulfillmentProcessor,OrderProcessor)
	 	workflow {
	 		do (!return[Return.Complete]) {	
		 		any {
		 			transaction ReturnReceived { // ReturnRecieved can run multiple times before the process completes
		 				roles(FulfillmentProcessor, OrderProcessor)
		 			}	 					
		 			transaction ReturnProcessCompleted {
			 			roles(FulfillmentProcessor, OrderProcessor)
			 		}
		 		}		 		
	 		}
	 	}
	 	postconditions {
          	success(return[Return.Complete])          		
        }
	 }
	 
	  process ReturnProcessing (Return return) {  //should be returnProcessing
	  	description "Usually a return is initiated by customer/merchant on behalf of customer and return ASN is sent. The fulfillment provider notifies when the return is processed (received, disposition - put away or discarded)"
	  	roles(OrderProcessor, FulfillmentProcessor)
	 	workflow {
	 		//An end customer (or a merchant acting on their behalf) wishes to arrange for a return of all or part of a previously fulfilled shipment.
	 		transaction ProcessReturnAdvanceShipmentNotice {
	 			roles(OrderProcessor, FulfillmentProcessor)
	 		}
	 		do (!return[Return.Complete]) {	  
	 			any {
		 			transaction UpdateReturnAdvanceShipmentNotice {
		 				roles(OrderProcessor, FulfillmentProcessor)
		 			}
		 			transaction CancelReturnAdvanceShipmentNotice {
		 				roles(OrderProcessor, FulfillmentProcessor)
		 		    }		
		 			transaction ReturnReceived {
		 				roles(FulfillmentProcessor, OrderProcessor)
		 			}
		 			transaction ReturnProcessCompleted { //this should happen once to exit the loop
 		 				roles(FulfillmentProcessor, OrderProcessor)
		 			}
		 		}		 			
	 		}	 		
	 	}
	 	postconditions {
          	success(return[Return.Complete])          		
        }
	  }
	  
	  process InventorySnapshotUpdate {     
	  	description "A notification may be sent out to notify a snapshot was made of the inventory numbers"
	  	roles (FulfillmentProvider, InventoryObserver)
	  	workflow {
	  		transaction UpdateInventorySnapshot {
	 			roles(FulfillmentProvider, InventoryObserver
	 			)
	 		}
	  	}
	  }
	
}