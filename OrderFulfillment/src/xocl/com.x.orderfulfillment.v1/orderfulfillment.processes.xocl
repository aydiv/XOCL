/** This file includes the processes that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {

	import com.x.orderfulfillment.v1.*
	import com.x.pim.v1.*
	import com.x.inventory.v1.*	

    entity Fulfillment {
    	description "Entity that represents the various states of a fulfillment order"
        state Created [OnHold, Shipped, Cancelled]
        state OnHold [Released] "reached when all of the uncancelled/unshipped items are put on hold" 
        state Released [Shipped, Cancelled] "reached when all of the uncancelled/unshipped items are released from hold"
        state Shipped [Complete]  "reached when all the uncancelled items get shipped"
        state Cancelled [Complete]  "reached when all items get cancelled"
        state Complete    "reached if all of the uncancelled items are shipped or cancelled"
    } 
    
 
    entity Receiving {
    	description   "Entity that represents the various states of inventory that is expected to be received <a.k.a receiving>"
    	state Created [Cancelled, Received, PutAway, Complete]
    	state Cancelled [Complete]  "reached if all of the receiving is cancelled"
    	state Received [PutAway] "reached if all of the uncancelled receiving is received"
    	state PutAway [Complete] "reached if all of the uncancelled delivered receiving is putaway"
    	state Complete   "reached if all of the uncancelled receiving is putaway or cancelled"
    }
   
	 entity Return {
	 	description "Represents the state machine for returns initated for fulfillments that are completed"
	  	state Expected [Cancelled, Received] "Beginning state. Triggered when return ASN is received"
    	state Cancelled [Complete] "reached if after a ASN was sent, the return ASN is cancelled"
    	state Received [Complete] "reached if the return is received with ASN or some return is received unexpectedly. It is possible to begin with this state"
    	state Complete "reached if entire return is in Cancelled or Received state"
	 }
   
	process DropshipFulfillmentProcessing (Fulfillment fulfillment) {	
	 description "An order is submitted to dropshipper for fulfillment and is either shipped or cancelled"
	 
	 	roles(OrderProcessor, DropshipProcessor)
        
	        workflow { 
		 	 	transaction ProcessDropshipFulfillment {
		 	 		description "A dropshipper is asked to fulfill all or parts of an order"
		        	roles(OrderProcessor, DropshipProcessor)
		    	}
		    	
		    	any{
					workflow ProductLookup {  
						description "The DropShip processor can get information from PIM, such as customs and shipment related attributes"
						roles(DropshipProcessor, null)
					}
		    	}
		    	
		 	    do(!fulfillment[Fulfillment.Complete]) {
		 	        description "While the fulfillment is not complete, several things can occur in any order"	 	 	    		 	    	
			 	 	any {
			 	 		noop	 	 		
				 	 	transaction FulfillmentExpectedShipDateUpdated {
			        		roles(DropshipProcessor, OrderProcessor)
			        	}
			        	
			        	transaction DropShipSupplierComment {
			        		roles(DropshipProcessor, OrderProcessor)
			        	}
			        	
			        	transaction MerchantComment {
			        		roles(OrderProcessor, DropshipProcessor)
			        	}
		    			transaction FulfillmentCancelled {
		    				description "A supplier may cancel all/parts of the fulfillment"
		        			roles(DropshipProcessor, OrderProcessor)
		        		}
		        	
		    			transaction FulfillmentShipped {
		    				roles(DropshipProcessor, OrderProcessor)
		    			}
		    			
		    			transaction FulfillmentCompleted {
		    				description "Once the fulfillment is completed, a FulfillmentCompleted message is sent, setting the state to Complete"
				 			roles(DropshipProcessor, OrderProcessor)
				 		}	        		
		        	} 		
		    	}        		
	 	}
	 	postconditions {
          	success(fulfillment[Fulfillment.Complete])          		
        }
     }
	 	
 	 
 	process ThirdPartyFulfillmentProcessing (Fulfillment fulfillment) {		
	 description "An order is submitted to third party for fulfillment and is either shipped or cancelled"
	 
	 	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
 		 workflow{		
	 	 	transaction ProcessThirdPartyFulfillment {
	 	 		description "A merchant wants to direct a fulfillment provider to ship all or part of an order to an end customer"
	        	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	    	}
	    	any{
				workflow ProductLookup {  
					description "The DropShip processor can get information from PIM, such as customs and shipment related attributes"
					roles(ThirdPartyFulfillmentProcessor, null)
				}
		    }    	
	 	    do(!fulfillment[Fulfillment.Complete]) {
	 	    	description "While the fulfillment is not complete, several things can occur in any order"	 	 		 	    	
		 	 	any {
		 	 		noop		 	 			 		
			 	 	transaction MerchantHoldFulfillment {
			 	 		description "A merchant wants to hold a shipment to prevent it from shipping temporarily"
			 	 		roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
			 	 	}
			 	 	transaction FulfillmentProcessorHoldFulfillment {
			 	 		description "A fulfillment processor puts a shipment on hold because it cannot be completed"
			 	 		roles(ThirdPartyFulfillmentProcessor, OrderProcessor)
			 	 	}
			 	 	transaction ReleaseFulfillment {
			 	 		description "A merchant wants to release a shipment previously held"
			 	 		roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
			 	 	}	
	    			transaction CancelFulfillment {
	    				description "A merchant may choose to cancel fulfillment in progress"
	        			roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	        		}
	        	    transaction FulfillmentProcessorCancelFulfillment {
	    				description "A merchant may choose to cancel fulfillment in progress"
	        			roles(ThirdPartyFulfillmentProcessor,OrderProcessor)
	        		}
	        		transaction LookupFulfillments {
	        			description "A merchant may choose to lookup all fulfillments for an order"
	        			roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	        		}
	        		transaction FulfillmentInformationUpdated {
	        			description "A merchant is informed of changes to a fulfillment’s status as they occur, such as when the order is picked, ready for shipment, or tendered to a shipping carrier"
	        			roles(ThirdPartyFulfillmentProcessor, OrderProcessor)
	        		}
	        		transaction FulfillmentShipped {
	        			description "merchant is notified as shipments for the fulfillment order get shipped"
	    				roles(ThirdPartyFulfillmentProcessor, OrderProcessor)
	    			}
	    			transaction FulfillmentCompleted {
	    				description "Once the fulfillment is completed, a FulfillmentCompleted message is sent, setting the state to Complete"
		 				roles(ThirdPartyFulfillmentProcessor, OrderProcessor)		 			
	    			}	        		
	        	}	        	 
    		}  	
    	}
    	postconditions {
          	success(fulfillment[Fulfillment.Complete])   
    	} 	
	 }
	 
	 process ShippingRateSearch {
	 	description "A merchant requests for shipping quotes for a fulfillment order"	 
	 	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	 	workflow { 
	 	 	transaction SearchShippingRate {
	        	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
        	}        	
        }
	 }
	 
	 
	 process ReceivingProcessing (Receiving receiving) {
	 	description "A merchant notifies a fulfillment provider of a future inventory receipt. The fulfillment provider notifies when the receipt is processed (received, put away)"
	 	roles(ProcurementSystem, FulfillmentProcessor, InventoryManager, InventoryObserver)
	 	workflow {
		 	transaction ProcessReceiving {
		 		roles(ProcurementSystem, FulfillmentProcessor)
		 	}
		 	
		 	do(!receiving[Receiving.Complete]) {	 
		 		any {
		 			noop
			 		transaction UpdateReceiving {
			 			description "A merchant wants to give updated information about a previously communicated receiving such as expected date, carrier being used, tracking number, or packaging information "
			 			roles (ProcurementSystem, FulfillmentProcessor)
			 		}
			 	
			 		transaction LookupReceivings {
			 			description "A merchant wants to lookup receiving by purchase order number"
			 			roles (ProcurementSystem, FulfillmentProcessor)
			 		}
			 		transaction ReceivingInventoryStatusUpdated {
			 			description "Fulfillment processor updates the status in the procurement system"
			 			roles (FulfillmentProcessor, ProcurementSystem)
			 		}
		 			workflow StockItemUpdate{
						roles (FulfillmentProcessor, InventoryManager, InventoryObserver)
					} 		
			 		transaction CancelReceiving{
			 			description "A merchant wants to cancel receiving"
			 			roles (ProcurementSystem, FulfillmentProcessor)			 			
			 		}
			 		transaction ReceivingCompleted {
			 			description "Merchant is informed that receiving is completed"
			 			roles (FulfillmentProcessor, ProcurementSystem)
			 		}			 		
		 		}		 		
		 	}		 		
		 }
		 postconditions {
          	success(receiving[Receiving.Complete])          		
        }		 
	 }
	 
	 process ReturnReceiptProcessing (Return return) {
	 	description "Return is initiated by customer directly so that first intimation of return is its receipt"
	 	roles(FulfillmentProcessor,OrderProcessor, InventoryManager, InventoryObserver)
	 	workflow {
	 		do (!return[Return.Complete]) {	
		 		any {
		 			noop
		 			transaction ReturnReceived { 
		 				description  "ReturnRecieved can run multiple times before the process completes"
		 				roles(FulfillmentProcessor, OrderProcessor)
		 			}	
		 			workflow StockItemUpdate{
						roles (FulfillmentProcessor, InventoryManager, InventoryObserver)
					} 					
		 			transaction ReturnProcessCompleted {
		 				description  "ReturnProcessCompleted indicates sucessful completion of the process"
			 			roles(FulfillmentProcessor, OrderProcessor)
			 		}
		 		}		 		
	 		}
	 	}
	 	postconditions {
          	success(return[Return.Complete])          		
        }
	 }
	
	 process ReturnProcessing (Return return) { 
	  	description "Usually a return is initiated by customer/merchant on behalf of customer and return ASN is sent. The fulfillment provider notifies when the return is processed (received, disposition - put away or discarded)"
	  	roles(OrderProcessor, FulfillmentProcessor, InventoryManager, InventoryObserver)
	 	workflow {
	 	
	 		transaction ProcessReturnAdvanceShipmentNotice {
	 			description "An end customer (or a merchant acting on their behalf) wishes to arrange for a return of all or part of a previously fulfilled shipment."
	 			roles(OrderProcessor, FulfillmentProcessor)
	 		}
	 		do (!return[Return.Complete]) {	  
	 			any {
	 				noop
		 			transaction UpdateReturnAdvanceShipmentNotice {
		 				roles(OrderProcessor, FulfillmentProcessor)
		 			}
		 			transaction CancelReturnAdvanceShipmentNotice {
		 				roles(OrderProcessor, FulfillmentProcessor)
		 		    }		
		 			transaction ReturnReceived {
		 				roles(FulfillmentProcessor, OrderProcessor)
		 			}
		 			workflow StockItemUpdate{
						roles (FulfillmentProcessor, InventoryManager, InventoryObserver)
					} 		
		 			transaction ReturnProcessCompleted { 
		 				description "ReturnProcessCompleted indicates sucessful completion of the process"
 		 				roles(FulfillmentProcessor, OrderProcessor)
		 			}
		 		}		 			
	 		}	 		
	 	}
	 	
	 	postconditions {
          	success(return[Return.Complete])          		
        }
	  } 
}