/** This file includes the processes that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	
	// Entity that represents the various states of a fulfillment order
    entity Fulfillment
    {
        state Created [OnHold, Shipped, Cancelled]
        // reached when all of the uncancelled/unshipped items are put on hold
        state OnHold [Released]
        // reached when all of the uncancelled/unshipped items are released from hold
        state Released [Shipped, Cancelled]
        // reached when all the uncancelled items get shipped
        state Shipped
        // reached when all items get cancelled
        state Cancelled
    }
    
    // Entity that represents the various states of inventory that is expected to be received <a.k.a receiving>
    entity Receiving
    {
    	state Created [Cancelled, Delivered, PutAway, Complete]
    	//reached if all of the receiving is cancelled
    	state Cancelled [Complete]
    	//reached if all of the uncancelled receiving is delivered
    	state Delivered [PutAway]
    	//reached if all of the uncancelled delivered receiving is putaway
    	state PutAway [Complete]
    	//reached if all of the uncancelled receiving is putaway or cancelled
    	state Complete
    }
    
    workflow ProcessThirdPartyFulfillment implements ProcessFulfillment{		
 	 	
 	 	// A merchant wants to direct a fulfillment provider to ship all or part of an order to an end customer
 	 	transaction ProcessThirdPartyFulfillment {
        	roles(ProcessFulfillment.OrderProcessor, ProcessFulfillment.ThirdPartyFulfillmentProcessor)
    	}
    	
 	    do(*) {	 	    		 	    	
	 	 	any {		 	 			 		
		 	 	//A merchant wants to hold a shipment to prevent it from shipping temporarily
		 	 	transaction HoldFulfillment {
		 	 		roles(ProcessFulfillment.OrderProcessor, ProcessFulfillment.ThirdPartyFulfillmentProcessor)
		 	 	}
		 	 	
		 	 	//A merchant wants to release a shipment previously held
		 	 	transaction ReleaseFulfillment {
		 	 		roles(ProcessFulfillment.OrderProcessor, ProcessFulfillment.ThirdPartyFulfillmentProcessor)
		 	 	}
	        	
    			//A merchant may choose to cancel fulfillment in progress		
    			transaction CancelFulfillment {
        			roles(ProcessFulfillment.OrderProcessor, ProcessFulfillment.ThirdPartyFulfillmentProcessor)
        		}
        		
        		//A merchant may choose to lookup all fulfillments for an order
        		transaction LookupFulfillments {
        			roles(ProcessFulfillment.OrderProcessor, ProcessFulfillment.ThirdPartyFulfillmentProcessor)
        		}
        		
        		//A merchant is informed of changes to a fulfillment’s status as they occur, such as when the order is picked, ready for shipment, or tendered to a shipping carrier
        		transaction FulfillmentInformationUpdated {
        			roles(ProcessFulfillment.ThirdPartyFulfillmentProcessor, ProcessFulfillment.OrderProcessor)
        		}
        	
    			//merchant is notified as shipments for the fulfillment order get shipped
        		transaction FulfillmentShipped {
    				roles(ProcessFulfillment.ThirdPartyFulfillmentProcessor, ProcessFulfillment.OrderProcessor)
    			}		        		
        	}
    	}        	
    	transaction FulfillmentCompleted {
	 		roles(ProcessFulfillment.ThirdPartyFulfillmentProcessor, ProcessFulfillment.OrderProcessor)
	 	}	 	
	 	
	 }
   
	process ProcessFulfillment (Fulfillment fulfillment) {
		description "An order is submitted to dropshipper for fulfillment and is either shipped or cancelled"
	 
	 	roles(OrderProcessor, DropshipProcessor, ThirdPartyFulfillmentProcessor)
	 	postconditions {
          	success(fulfillment[Fulfillment.Shipped], fulfillment[Fulfillment.Cancelled])          		
        }
     }
	 	
 	 workflow ProcessDropshipFulfillment implements ProcessFulfillment{
 	 	 
 	 	transaction ProcessDropshipFulfillment {
        	roles(ProcessFulfillment.OrderProcessor, ProcessFulfillment.DropshipProcessor)
    	}
    	
 	    do(*) {	 	    		 	    	
	 	 	any {
	 	 			 	 		
		 	 	transaction FulfillmentExpectedShipDateUpdated {
	        		roles(ProcessFulfillment.DropshipProcessor, ProcessFulfillment.OrderProcessor)
	        	}
	        	
	        	transaction DropShipSupplierComment {
	        		roles(ProcessFulfillment.DropshipProcessor, ProcessFulfillment.OrderProcessor)
	        	}
	        	
	        	transaction MerchantComment {
	        		roles(ProcessFulfillment.OrderProcessor, ProcessFulfillment.DropshipProcessor)
	        	}
	        	
    			transaction FulfillmentCancelled {
        			roles(ProcessFulfillment.DropshipProcessor, ProcessFulfillment.OrderProcessor)
        		}
        	
    			transaction FulfillmentShipped {
    				roles(ProcessFulfillment.DropshipProcessor, ProcessFulfillment.OrderProcessor)
    			}		        		
        	}
    	}        	
    	transaction FulfillmentCompleted {
	 		roles(ProcessFulfillment.DropshipProcessor, ProcessFulfillment.OrderProcessor)
	 	}
 	}
 	
 	
	 	
	 
	 
	 process ShippingRateSearch {
	 	description "A merchant requests for shipping quotes for a fulfillment order"	 
	 	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
	 	 workflow { 
	 	 	transaction LookupShippingRate {
	        	roles(OrderProcessor, ThirdPartyFulfillmentProcessor)
        	}        	
        }
	 }
	 
	 
	 
	 
	 process ProcessReceiving (Receiving receiving) {
	 	description "A merchant advises a fulfillment provider of a forthcoming inventory replenishment (a.k.a. receiving). On receipt the inventory is put away and deemed complete unless it is cancelled"
	 	roles(ReceivingInformationProvider, ReceivingProcessor)
	 	workflow {
		 	transaction ProcessReceiving {
		 		roles(ReceivingInformationProvider, ReceivingProcessor)
		 	}
		 	do(*) {	 	 
		 		any {
		 		   //A merchant wants to give updated information about a previously communicated receiving
		 		   //such as expected date, carrier being used, waybill/tracking number, or manifest/packing list information
			 		transaction UpdateReceiving {
			 			roles (ReceivingInformationProvider, ReceivingProcessor)
			 		}
			 		//A merchant wants to lookup receiving by purchase order number
			 		transaction LookupReceivings {
			 			roles (ReceivingInformationProvider, ReceivingProcessor)
			 		}
			 		//Notifies when inventory is delivered or status updates like delivered/put away etc
			 		transaction ReceivingInventoryStatusUpdated {
			 			roles (ReceivingInformationProvider, ReceivingInformationProvider)
			 		}
			 		//A merchant wants to cancel receiving
			 		transaction CancelReceiving{
			 			roles (ReceivingInformationProvider, ReceivingProcessor)			 			
			 		}
			 		
		 		}
		 	}
		 	//Merchant is informed that receiving is completed
		 	transaction ReceivingCompleted {
		 		roles (ReceivingProcessor, ReceivingInformationProvider)
		 	}
		 		
		 }
		 postconditions {
          	success(receiving[Receiving.Complete], receiving[Receiving.Cancelled])          		
        }	 	
	 
	 }
	
}