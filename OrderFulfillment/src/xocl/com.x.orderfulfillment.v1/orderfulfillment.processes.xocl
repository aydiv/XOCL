/** This file includes the processes that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	
	   
    entity Order
    {
        state Created[Shipped, Cancelled]
        state Shipped
        state Cancelled
    }
    
   
	process OrderShipment(Order order) {
		description "An order gets submitted for shipping and is either shipped or cancelled"
	 
	 	roles(OrderManager, DropShipManager)
	 	
	 	 workflow { 
	 	 	transaction FulfillOrder {
	        	roles(OrderManager, DropShipManager)
        	}
        	
	 	    one [10 d]{
	 	    		 	    	
		 	 	any {		 	 		
		 	 		noop		 	 		
			 	 	//Dropship manager may notify change in expected ship date
			 	 	transaction ItemExpectedShipDate {
		        		roles(DropShipManager, OrderManager)
		        	}
		        	
		        	transaction DropShipperComment {
		        		roles(DropShipManager, OrderManager)
		        	}
		        	
		        	transaction MerchantComment {
		        		roles(OrderManager, DropShipManager)
		        	}	        	
	        	}	        	
	        	
        		// An order manager may choose to cancel the order partly or completely		
        		transaction CancelOrder {
	        		roles(DropShipManager, OrderManager)
	        	}
	        	
	        	transaction CancelItem {
	        		roles(DropShipManager, OrderManager)
        		}
        		// Order shipped notification is sent in parts as items get shipped
	        	transaction ItemShipped {
        			roles(DropShipManager, OrderManager)
        		}		        		
	        	
        	}
	 	}
	 	postconditions {
          	success(order[Order.Shipped], order[Order.Cancelled])          		
        }
	 	
	 }
	
}