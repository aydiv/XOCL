/** This file includes the processes that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	
	   
    entity Order
    {
        state Created[Shipped, Cancelled]
        // reached when all not cancelled items get shipped
        state Shipped
        // reached when all items get cancelled
        state Cancelled
    }
    
   
	process OrderFulfillment(Order order) {
		description "An order is submitted for fulfillment and is either shipped or cancelled"
	 
	 	roles(OrderManager, DropShipManager)
	 	preconditions(order[Order.Created])
	 	
	 	 workflow { 
	 	 	transaction FulfillOrder {
	        	roles(OrderManager, DropShipManager)
        	}
        	
	 	    do(*)[10 d] {	 	    		 	    	
		 	 	any {
		 	 			 	 		
			 	 	//Dropship manager may notify change in expected ship date
			 	 	transaction ItemExpectedShipDate {
		        		roles(DropShipManager, OrderManager)
		        	}
		        	
		        	transaction DropShipSupplierComment {
		        		roles(DropShipManager, OrderManager)
		        	}
		        	
		        	transaction MerchantComment {
		        		roles(OrderManager, DropShipManager)
		        	}
		        	
        			// A supplier may choose to cancel the order		
        			transaction ItemCancelled {
	        			roles(DropShipManager, OrderManager)
	        		}
	        	
        			// Order shipped notification is sent in parts as items get shipped
	        		transaction ItemShipped {
        				roles(DropShipManager, OrderManager)
        			}		        		
	        	}
        	}        	
        	transaction OrderFulfilled {
		 		roles(DropShipManager, OrderManager)
		 	}
	 	}
	 	
	 	postconditions {
          	success(order[Order.Shipped], order[Order.Cancelled])          		
        }
	 	
	 }
	
}