/** This file includes the messages that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	
	import com.x.core.v1.*
	
		
	record Fulfillment {
		guid fulfillmentId		
		FulfillmentData fulfillment
		/** identifier of warehouse where inventory is stored */
		string warehouseId
	}
	
	record DropShipFulfillment {
				
		guid fulfillmenId		
		DropshipFulfillmentData fulfillment
	}
	
	record DropshipFulfillmentData extends FulfillmentData{
		/** details of inventory supplier */
		string supplierId
		string supplierName
	}
	
	record FulfillmentData {
		
		/** Identifier of the order from which the fulfillment  got created.*/
		string orderNumber 
		
		array<FulfillmentLineData> fulfillmentLines
		
		FulfillmentStatus status 
		string dateOrdered 

		/** The total paid by the customer (total of items, fees, taxes, etc.) */ 
		CurrencyAmount grandTotal
		
		/** The grand total minus any non-shipping discounts */
		CurrencyAmount netMerchandiseValue
	
		/** Total of all the items -- without taxes, fees, etc. */
		CurrencyAmount itemPriceTotal

		/** Breakdown of the total of all related fees that influence the price */		
		CurrencyAmount totalInsuranceCost
		CurrencyAmount totalTaxAmount
		CurrencyAmount totalDiscountAmount
		array<AdditionalCost> additionalCosts
		/** A collection of all the promotional discounts that were applied at the order level */
		array<PromotionalDiscount> discounts
				
		/** The channel where this fulfillment originated (ebay, amazon, etc.) */
		string sourceId
		
		/** The list of shipments that were created to ship one or more of the items in this fulfillment */
		array<Shipment>? shipments
				
		/** Default shipping for entire fulfillment that can be overridden by each fulfillment line data */
		DateRange? expectedShipDate
		
		ShipTo destination
		
		CustomerInfo? customer
		Address? billingAddress		
		
	}
	record Shipment { 
		description "A shipment represents a set of items that shipped, in one or more shipment containers"
		
		/** only need to be unique to the fulfillment like 1, 2, 3, etc...*/
		string shipmentId
		CurrencyAmount shippingFees	"The fees paid by the customer for this shipment"
		CurrencyAmount? discountAmount 	"Total discount amount summarized from all PromotionalDiscount."
		array<PromotionalDiscount>? discounts
		CurrencyAmount? additionalCost
		CurrencyAmount? packagingHandlingCost
		CurrencyAmount? surcharge  "UPS or FedEx to Alaska, Hawaii or Puerto Rico would typically encounter a surcharge."

		array<ShipmentContainer> shipmentContainers;
	}

	record ItemQuantity{
		string sku
		string fulfillmentLineId
		int quantity	
	}
	
	record ShipmentContainer {  //TODO: Can one item be in more than one box? if so does it have multiple tracking #s?
			description "A shipment container represents a set of items that shipped in a single container with one tracking number"
			array <ItemQuantity> itemsWithQuantity "Reference to items and quantities in the shipment container"
			TrackingDetail trackingDetail
			string? shippingMethod  "The method used to ship: Next day, ground, etc. "
			DateRange? deliveryWindow
			DateRange? shippingWindow
			string? shippingMessage
	}
	
	
    record ShippingQuote {
    	description "A quote for shipping a set of items"
		string shippingMethod  "The method used to ship: Next day, ground, etc. "
		string shippingMethodDescription 
		
		CurrencyAmount shippingFees		"The fees to be paid by the customer for this shipment"		
		CurrencyAmount? packagingHandlingCost
		CurrencyAmount? surcharge  "UPS or FedEx to Alaska, Hawaii or Puerto Rico would typically encounter a surcharge."
		
		DateRange? deliveryWindow
		DateRange? shippingWindow
		
		array<ShippingTag>? shippingTags	
	}
	
	enum ShippingTag{
		SIGNATURE_REQUIRED
		DELIVERY_CONFIRMATION
		TRACKABLE
		INSURED
	}
	
	record LineData {
		/* The unique id of this item */
		string fulfillmentLineId
		
		/* The ordered index of this item (also referred to as order line number) */
		string? itemId

		int quantity
		string sku
		string itemDescription
		
		GiftWrap? giftwrap
		CustomizationDetail? customizationDetail
	}
	
	
	record FulfillmentLineData extends LineData{
	
		/* Reference to FulfillmentData.orderNumber */
		string? orderNumber
		
		LineItemPrice unitPrice

		FulfillmentLineStatus status
		
		/** This is quantity * unit price */
		CurrencyAmount? price
			
		datetime? dateCancelled
		datetime? dateDelivered
		datetime? dateShipped
		
		/** A reference to the shipment that is used to ship this item */
		string? shipmentId
	}
	
	record LineItemPrice {
		/** The total price the customer is paying for this line (sum of price, taxes, fees, additional costs, etc.) */
		CurrencyAmount totalPrice
		
		/** The price the customer is paying for this item (without taxes, fees, addtional costs, etc.) */
		CurrencyAmount price 
		
		CurrencyAmount? insuranceCost
		
		/** The tax charges for this item with addtional data about the nature of the tax */
		Tax taxAmount

	    /** The sum all of the discount that were applied to this order line */
		CurrencyAmount? totalDiscountAmount

		/** A collection of all the discounts that were appled to this order line item */		
		array<PromotionalDiscount>? allDiscounts
		
		/** A collection of additional costs that were associated with this order line  */
		array<AdditionalCost>? additionalCosts
	}
	
	record Tax {
		TaxabilityType? taxability
		string? taxType
		double? effectiveRate
		CurrencyAmount taxesCharged
	}
	
	enum TaxabilityType {
		TAXABLE,
		NONTAXABLE,
		EXEMPT,
		DEFERRED
	}
	
	enum FulfillmentStatus {
		CREATED,
		IN_PROGRESS,
		ON_HOLD,
		CANCELLED,
		COMPLETED
	}
	
	enum FulfillmentLineStatus {  //TODO:  Discuss whether and how we handle the status of partial line shipment
		CREATED,
		PICKED,
		ON_HOLD,
		RELEASED,
		READY_TO_SHIP,
		SHIPPED,
		UNDELIVERABLE,
		CANCELLED,
		COMPLETED
	}
	
	
	record CustomerInfo confidential {
		union{guid, EntityId} id;   //id is created by the system that creates the record.	
		Name name
		Email? email
		Phone? phone
	}	
	
	record ShipTo confidential {
		Name name
		Address address
		GiftTag giftTag
	}
	
	record AdditionalCost {
		string costDescription
		CurrencyAmount amount
	}
	
	record PromotionalDiscount {
		string code
		string promoDescription
		PromotionDiscountType type
		CurrencyAmount amount
	}
	
	enum PromotionDiscountType {
		STOREWIDE_SALE,
		SHIPPING_DISCOUNT,
		PRODUCT_DISCOUNT,
		OTHER
	}
	
	record GiftWrap {
		/** SKU number value of the specific Gift Wrap to be used */
		string giftwrapSKU
		CurrencyAmount giftwrapCost
	}
	
	record GiftTag {
		string? from
		string? to
		string giftMessage		
	}
	
	record CustomizationDetail {
		/** Unique identifier for this customization item. */
		string customizationItemId
		// customization Type (e.g. Embroidery, Embossing, Engraving, Tshirt, Jersey)
		string customizationType
		// Instructions used to explain where logos and such should beplaced on item (e.g. CF, FB, FONT,COLR, TEXT, LOCN)
		array <string> instructions
		//e.g. Center, Front, Back, Name and Number
		string instructionsDescription
		//customization Content (e.g. "JOHN DOE, 00", <font type>, <font size>, <font color>) or a SKU number of a logo/patch/sticker (e.g. 3983522)
		string content
		//e.g.Large Secondary Logo White, Font type is x, Font size is x
		string contentDescription
		CurrencyAmount customizationCost
	}
	
	record DropShipSupplierComment {
		guid fulfillmentId
		array<string> fulfillmentLineIds
		string comment 
	}
	
	record FulfillmentExpectedShipDateUpdated {
		guid fulfillmentId
		array <string> fulfillmentLineIds
		DateRange expectedShipDate
	}
	
	record FulfillmentShipped {
		guid fulfillmentId
		/** warehouse that fulfilled the order. Mandatory for a third party fulfillment processor */
		string? warehouseId
		array<Shipment> shipments
		datetime dateShipped		
	}
		
	record TrackingDetail {
		array<string> trackingNumbers
		string carrier
		string service
	}
	
		
	record FulfillmentCancelled {
		guid fulfillmentId
		array <FulfillmentLineData> fulfillmentLines
		string? cancelMessage
	}
	
	record CancelFulfillment {
		guid fulfillmentId
		array <FulfillmentLineData> fulfillmentLines
		string? cancelMessage
	}
		
	record MerchantComment {
		guid fulfillmentId
		array<string> fulfillmentLineIds
		string merchantComment 
	}
	
	record ProcessThirdPartyFulfillment {
		Fulfillment fulfillment
	}
	
	record ProcessDropshipFulfillment {
		DropShipFulfillment fulfillment
	}
	
	record FulfillmentCompleted {
		Fulfillment fulfillment
	}
	
	record SearchShippingRate {		
		/** details of merchant to whom inventory belongs should come from tenantID */
		/** identifier of warehouse where inventory is stored */
		string warehouseId
		array<LineData> lines  "The item information for which we are looking up shipping rates"
	}
	
	record SearchShippingRateSucceeded  {
		/** breakup of fulfillment into shipments, each shipment contains its shipping costs */
		array<ShippingQuote> quotes
		SearchShippingRate request
	}
	
	record SearchShippingRateFailed {
		SearchShippingRate request
		array<Error> errors
	}
	
	record MerchantHoldFulfillment {
		guid fulfillmentId
		array <string> fulfillmentLineIds
		string? holdMessage
	}	

	enum HoldReasonCode{
		description "The reasons that a hold may occur"
		INVENTORY_UNAVAILABLE
	}

	record FulfillmentProcessorHoldFulfillment {
		guid fulfillmentId
		array <string> fulfillmentLineIds  "The line items that are in this hold"
		array<HoldReasonCode>? reasonCodes;
		string? holdMessage
	}

	record ReleaseFulfillment {
		guid fulfillmentId
		array <string> fulfillmentLineIds
		string? releaseMessage
	}
	
	
	record FulfillmentInformationUpdated {
		guid fulfillmentId
		FulfillmentStatus status 
		DateRange? expectedShipDate  "The Updated expected ship date"
		array<Shipment> shipmentUpdates  "All shipments shipped for a fulfillment"
		string? comment
	}
	
	
	record LookupFulfillments {
		string orderNumber   
	}
	
	record LookupFulfillmentsSucceeded extends LookupFulfillments{
		array<Fulfillment> fulfillments
	}
	
	record LookupFulfillmentsFailed extends LookupFulfillments {
		array<Error> errors
	}
	
	enum ReceivingInventoryStatus {
		NOT_RECEIVED
		TRUCK_CHECKIN	
		RECEIVED
		PUT_AWAY
		CANCELLED	
	}
	
	record ReceivingLineData {
		string masterPurchaseOrderNumber "Master Purchase Order #" 
		string? purchaseOrderLineNumber
		string invoiceNumber  "purchase order # or ASN #"
		DateRange? deliveryWindow		
		string? cartonId  "mandatory if receipt is to be managed as ASN Identifies the carton # for ASN's, typically 20 digit bar code in UCC-128 format"
		string? lotNumber "Product Lot number if needed to send on PO"
	
		ReceivingInventoryStatus status	"status of receiving inventory"
		InventoryCondition condition
		
		array<RecievingContainer> recievingContainers;
	}
	
	record RecievingContainer{
		string sku
		int expectedQty
		TrackingDetail? trackingDetail	
		string? shippingMethod
		string? shippingMessage
		datetime? deliveredDate
		
	}
		
	record ReceivingData {
		/** details of supplier */
		string? supplierId
		string? supplierName
		string warehouseId "warehouse expected to receive products" 
		string masterPurchaseOrderNumber "Master Purchase Order #"
		DateRange? expectedDeliveryDate
		datetime? shippedDate "Shipped Date for PO"
		string? comments "Comments for a Purchase Order"
		array<ReceivingLineData> receivingLines "Receiving line data"
	}
	
		
	record Receiving {
		guid receivingId
		ReceivingData receiving
	}
	
	record ProcessReceiving {
		Receiving receiving
	}
	
	record UpdateReceiving {
		Receiving receiving
	}
	
	record LookupReceivings {
		string masterPurchaseOrderNumber
	}
	
	record LookupReceivingsSuceeded extends LookupReceivings{		
		array<ReceivingLineData> receivings
	}
	
	record LookupReceivingsFailed extends LookupReceivings{
		array<Error> errors
	}
	
	record ReceivingInventoryStatusUpdated {
		guid receivingId
		//inventory for which update occured
		array<ReceivingLineData> receivingLines
		ReceivingUpdateReason updateReason
	}
	
	enum ReceivingUpdateReason {
		RECEIPT_TRUCK_CHECKIN
		INVENTORY_RECEIPT
		INVENTORY_PUT_AWAY
		CANCELLATION
	}
	
	record ReceivingCompleted {
		Receiving receiving
	}
	
	record CancelReceiving {
		guid receivingId
		array<ReceivingLineData> receivingLines
		string? reasonCode
		string? cancelMessage
	}
	
	
	record Return {
		guid returnId
		ReturnData returnDetails
	}
	
	record ReturnData {
		/** identifier of fulfillment that is being returned */
		guid fulfillmentId
		/** Same as sales order number */
		string orderNumber
		/** aka RMA */
		string returnOrderNumber
		/** warehouse expected to receive returned data. Mandatory for a third party fulfillment processor */
		string? warehouseId
		/* A collection containing the items and quantities that were returned. It may
		 * not include all items for a fulfillment.*/
		array<ReturnLineData> returnedItems
		string? returnComment
		ReturnReason returnReason;	
		/** License plate attached to product being processed for customer return ASN */
		string loadNumber
	}
	
	enum ReturnReason{
		CUSTOMER "The customer initiated the return from either an RMA or return label"
		UNDELIVERABLE "The shipment was undeliverable"
	}
	
	record ReturnLineData {
		string returntLineId	"unique id for the returned item"	
		string sku
		int quantity
		string itemDescription	
		LineItemPrice price
		InventoryCondition condition
	}
	
	record ReturnReceived {
		ReturnData returnedData
		datetime dateReceived
	}
	
	record ReturnAdvanceShipmentNotice {
		ReturnData returnedData
		DateRange? expectedDeliveryDate
	}
	
	record ProcessReturnAdvanceShipmentNotice {
		ReturnAdvanceShipmentNotice asn
	}
	
	record UpdateReturnAdvanceShipmentNotice {
		ReturnAdvanceShipmentNotice asn
	}
	
	record CancelReturnAdvanceShipmentNotice {
		ReturnAdvanceShipmentNotice asn
	}
	
	record ReturnProcessCompleted {
		ReturnData returnedData
	}
	
	enum InventoryCondition {
		SELLABLE
		UNSELLABLE
	}
	
		
}



