/** This file includes the messages that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	
	import com.x.core.v1.*
	
		
	record Fulfillment {
				
		guid fulfillmentId		
		FulfillmentData fulfillment
		/** details of merchant to whom inventory belongs */
		string clientId
		string? clientName
	}
	
	record DropShipFulfillment {
				
		guid fulfillmenId		
		DropshipFulfillmentData fulfillment
	}
	
	record DropshipFulfillmentData extends FulfillmentData{
		/** details of inventory supplier */
		string supplierId
		string supplierName
	}
	
	record FulfillmentData {
		
		/** Identifier of the order from which the fulfillment  got created.*/
		string orderNumber 
		
		array<FulfillmentLineData> fulfillmentLines
		
		FulfillmentStatus status 
		string dateOrdered 

		/** The total paid by the customer (total of items, fees, taxes, etc.) */ 
		CurrencyAmount grandTotal
		
		/** The grand total minus any non-shipping discounts */
		CurrencyAmount netMerchandiseValue
	
		/** Total of all the items -- without taxes, fees, etc. */
		CurrencyAmount itemPriceTotal

		/** Breakdown of the total of all related fees that influence the price */		
		CurrencyAmount totalInsuranceCost
		CurrencyAmount totalTaxAmount
		CurrencyAmount totalDiscountAmount
		array<AdditionalCost> additionalCosts
		/** A collection of all the promotional discounts that were applied at the order level */
		array<PromotionalDiscount> discounts
				
		/** The channel where this fulfillment originated (ebay, amazon, etc.) */
		string sourceId
		
		/** The list of shipments that were created to ship one or more of the items in this fulfillment */
		array<Shipment>? shipments
				
		/** Default shipping for entire fulfillment that can be overridden by each fulfillment line data */
		DateRange? expectedShipDate
		
		ShipTo destination
		
		CustomerInfo? customer
		Address? billingAddress		
		
	}
	
	record Shipment {
		/** only need to be unique to the fulfillment like 1, 2, 3, etc...*/
		string shipmentId		
		ShipmentDetails shipmentDetails
	}	
	
	record ShipmentDetails {
		/** Items in the shipment */
		array<string> fulfillmentLineIds
		/** The fees for this shipment */
		CurrencyAmount shippingCost
		
		CurrencyAmount? packagingHandlingCost
		CurrencyAmount? surcharge  // UPS or FedEx to Alaska, Hawaii or Puerto Rico only.

		array<TrackingDetail>? trackingDetails		
		/** Next day, ground, etc. */
		string shippingMethod		
		
		DateRange? deliveryWindow
		DateRange? shippingWindow
		
		string? shippingMessage
		
		GiftTag? giftTag
		CustomizationDetail? customizationDetail
	}
	
	record FulfillmentLineData {
		/* The unique id of this item */
		string fulfillmentLineId
		
		/* The ordered index of this item (also referred to as order line number) */
		string? itemId
		
		/* Reference to FulfillmentData.orderNumber */
		string? orderNumber
		
		int quantity
		string productSku
		string itemDescription
		
		CurrencyAmount? unitPrice
		CurrencyAmount? unitTaxAmount
		CurrencyAmount? unitShippingCost
		CurrencyAmount? unitInsuranceCost
		CurrencyAmount? unitDiscountAmount

		FulfillmentStatus status
		
		/** This is quantity * unit price */
		CurrencyAmount? price
			
		datetime? dateCancelled
		datetime? dateDelivered
		datetime? dateShipped
	}
	
	enum FulfillmentStatus {
		CREATED,
		PICKED,
		ON_HOLD,
		RELEASED,
		READY_TO_SHIP,
		PARTIALLY_SHIPPED,
		SHIPPED,
		CANCELLED,
		COMPLETED
	}
	
	record CustomerInfo confidential {
		union{guid, EntityId} id;   //id is created by the system that creates the record.	
		Name name
		Email? email
		Phone? phone
	}	
	
	record ShipTo confidential {
		Name name
		Address address
	}
	
	record AdditionalCost {
		string costDescription
		CurrencyAmount amount
	}
	
	record PromotionalDiscount {
		string code
		string promoDescription
		PromotionDiscountType type
		CurrencyAmount amount
	}
	
	enum PromotionDiscountType {
		STOREWIDE_SALE,
		SHIPPING_DISCOUNT,
		PRODUCT_DISCOUNT,
		OTHER
	}
	
	record GiftTag {
		string? from
		string? to
		string giftMessage
		/** SKU number value of the specific Gift Wrap to be used */
		string giftwrapSKU
		CurrencyAmount giftwrapCost
	}
	
	record CustomizationDetail {
		/** Unique identifier for this customization item. */
		string customizationItemId
		// customization Type (e.g. Embroidery, Embossing, Engraving, Tshirt, Jersey)
		string customizationType
		// Instructions used to explain where logos and such should beplaced on item (e.g. CF, FB, FONT,COLR, TEXT, LOCN)
		array <string> instructions
		//e.g. Center, Front, Back, Name and Number
		string instructionsDescription
		//customization Content (e.g. "JOHN DOE, 00", <font type>, <font size>, <font color>) or a SKU number of a logo/patch/sticker (e.g. 3983522)
		string content
		//e.g.Large Secondary Logo White, Font type is x, Font size is x
		string contentDescription
		CurrencyAmount customizationCost
	}
	
	record DropShipSupplierComment {
		guid fulfillmentId
		array<string> fulfillmentLineIds
		string comment 
	}
	
	record FulfillmentExpectedShipDateUpdated {
		guid fulfillmentId
		array <string> fulfillmentLineIds
		DateRange expectedShipDate
	}
	
	record FulfillmentShipped {
		guid fulfillmentId
		array<Shipment> shipments
		datetime dateShipped		
	}
		
	record TrackingDetail {
		array<string> trackingNumbers
		string carrier
		string service
	}
	
		
	record FulfillmentCancelled {
		guid fulfillmentId
		array <FulfillmentLineData> fulfillmentLines
		string? cancelMessage
	}
	
	record CancelFulfillment {
		guid fulfillmentId
		array <FulfillmentLineData> fulfillmentLines
		string? cancelMessage
	}
		
	record MerchantComment {
		guid fulfillmentId
		array<string> fulfillmentLineIds
		string merchantComment 
	}
	
	record ProcessThirdPartyFulfillment {
		Fulfillment fulfillment
	}
	
	record ProcessDropshipFulfillment {
		DropShipFulfillment fulfillment
	}
	
	record FulfillmentCompleted {
		Fulfillment fulfillment
	}
	
	record LookupShippingRate {
		Fulfillment fulfillment
	}
	
	record LookupShippingRateSucceeded extends LookupShippingRate {
		/** breakup of fulfillment into shipments and their associated rates */
		array<ShipmentDetails> shippingRates
		
		//@TODO any other costs involved?
	}
	
	record LookupShippingRateFailed extends LookupShippingRate {
		array<Error> errors
	}
	
	record HoldFulfillment {
		guid fulfillmentId
		array <string> fulfillmentLineIds
		string? holdMessage
	}
	
	
	record ReleaseFulfillment {
		guid fulfillmentId
		array <string> fulfillmentLineIds
		string? releaseMessage
	}
	
	
	record FulfillmentInformationUpdated {
		guid fulfillmentId
		FulfillmentStatus status 
		/** Updated expected ship date */
		DateRange? expectedShipDate
		/** All shipments shipped for a  fulfillment */
		array<Shipment> shippingInfoUpdates
		string? comment
	}
	
	
	record LookupFulfillments {
		string orderNumber
	}
	
	record LookupFulfillmentsSucceeded extends LookupFulfillments{
		array<Fulfillment> fulfillments
	}
	
	record LookupFulfillmentsFailed extends LookupFulfillments {
		array<Error> errors
	}
	
	enum ReceivingInventoryStatus {
		NEW	
		DELIVERED
		PUT_AWAY
		CANCELLED	
	}
	
	record ReceivingLineData {
		/** Master Purchase Order # */
		string masterPurchaseOrderNumber
		string? purchaseOrderLineNumber
		/** purchase order # or ASN # */
		string invoiceNumber
		string productSku
		int expectedQty
		TrackingDetail? trackingDetail	
		string? shippingMethod
		DateRange? deliveryWindow
		string? shippingMessage		
		datetime? deliveredDate
		/** mandatory if receipt is to be managed as ASN 
		Identifies the carton # for ASN's, typically 20 digit bar code in UCC-128 format. */
		string? cartonId
		/** Product Lot number if needed to send on PO */
		string? lotNumber
		/** status of receiving inventory */
		ReceivingInventoryStatus status
		
	}
		
	record ReceivingData {
		/** details of merchant to whom the inventory belongs */
		string clientId
		string? clientName
		/** details of supplier */
		string? supplierId
		string? supplierName
		/** Master Purchase Order # */
		string masterPurchaseOrderNumber
		DateRange? expectedDeliveryDate
		/** Shipped Date for PO */
		datetime? shippedDate
		/** Comments for a Purchase Order */
		string? comments
		/** Receiving line data */
		array<ReceivingLineData> receivingLines
	}
	
		
	record Receiving {
		guid receivingId
		ReceivingData receiving
	}
	
	record ProcessReceiving {
		Receiving receiving
	}
	
	record UpdateReceiving {
		Receiving receiving
	}
	
	record LookupReceivings {
		string masterPurchaseOrderNumber
	}
	
	record LookupReceivingsSuceeded extends LookupReceivings{		
		array<ReceivingLineData> receivings
	}
	
	record LookupReceivingsFailed extends LookupReceivings{
		array<Error> errors
	}
	
	record ReceivingInventoryStatusUpdated {
		guid receivingId
		//inventory for which update occured
		array<ReceivingLineData> receivingLines
	}
	
	record ReceivingCompleted {
		Receiving receiving
	}
	
	record CancelReceiving {
		guid receivingId
		array<ReceivingLineData> receivingLines
		string? reasonCode
		string? cancelMessage
	}
	
	enum ReturnItemsCondition {
		DAMAGED
		GOOD
	}
	
	record Return {
		guid returnId
		ReturnData returnDetails
	}
	
	record ReturnData {
		/** details of merchant/supplier to whom inventory is being returned */
		string clientId
		string? clientName
		/** identifier of fulfillment that is being returned */
		guid fulfillmentId
		/** Same as sales order number */
		string orderNumber
		string? returnOrderNumber
		/* A collection containing the items and quantities that were returned. It may
		 * not include all items for a fulfillment.*/
		array<ReturnLineData> returnedItems
		string customerReturnReason
		ReturnItemsCondition condition
		/** License plate attached to product being processed for customer return ASN */
		string loadNumber
	}
	
	record ReturnLineData {
		/* unique id for the returned item */
		string ReturntLineId		
		string productSku
		int quantity
		string itemDescription		
		/* Reference to the shipment that was used to ship this item */
		string shipmentId
	}
	
	record ReturnReceived {
		ReturnData returnedData
		datetime dateReceived
	}
	
	record ReturnAdvanceShipmentNotice {
		ReturnData returnedData
		DateRange? expectedDeliveryDate
	}
	
	record ProcessReturnAdvanceShipmentNotice {
		ReturnAdvanceShipmentNotice asn
	}
	
	record UpdateReturnAdvanceShipmentNotice {
		ReturnAdvanceShipmentNotice asn
	}
	
	record CancelReturnAdvanceShipmentNotice {
		ReturnAdvanceShipmentNotice asn
	}
	
	record ReturnProcessCompleted {
		ReturnData returnedData
	}
	
	enum InventoryCondition {
		SELLABLE
		UNSELLABLE
	}
	
	enum InventoryAdjustmentReason {
		CYCLE_COUNT
		DAMAGED_INVENTORY
		LIQUIDATION
	}
	
	record InventoryData {
		/** details of merchant/supplier whose inventory is being adjusted */
		string clientId
		string? clientName
		string productSku
		int unitQuantity
		/** stocking unit of measure */
		string StockingUOM
		InventoryCondition status		
	}
	
	record InventoryAdjusted {
		InventoryData adjustedInventory
		datetime adjustmentDate
		InventoryAdjustmentReason adjustmentReason
	}
		
}



