/** This file includes the messages that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v1 {
	
	import com.x.ordermanagement.v1.* 
	import com.x.core.v1.*
	
	enum OrderStatus 
	{
		NEW,
		ON_HOLD,
		BACKORDERED,
		PENDING_PAYMENT,
		READY_TO_SHIP,
		PARTIALLY_SHIPPED,
		SHIPPED,
		PROCESSING_RETURN,
		EXHANGED,
		CANCELLED,
		COMPLETED,
		PAID
	}
	
	enum ShippingServiceType 
	{
		MERCHANT_SHIPPED,
		DROP_SHIP,
		SHIPPING_SERVICE,
		WILL_CALL
	}
	
	enum PromotionDiscountType 
	{
		STOREWIDE_SALE,
		SHIPPING_DISCOUNT,
		PRODUCT_DISCOUNT,
		OTHER
	}
	
	record GiftTag 
	{
		string? from = null
		string? to = null
		string giftMessage
	}
	
	record CustomerInfo 
	{
		Email email
		Name name
		Phone phone
	}
	
	record PromotionalDiscount 
	{
		string code
		string promoDescription
		PromotionDiscountType type
		CurrencyAmount amount
	}
	
	record ShipTo 
	{
		Name name
		Address address
		GiftTag giftTag
	}
	
	record Shipping 
	{
		ShippingServiceType serviceType
		string? carrierCode = null
		
		/** Next day, ground, etc. */
		string shippingMethod
		
		DateRange deliveryWindow
		DateRange shippingWindow
		
		string? shippingMessage = null
	}
	
	record AdditionalCost 
	{
		string costDescription
		CurrencyAmount amount
	}
	
	record TrackingDetail 
	{
		string trackingNumber
		string? carrier = null
		string? service = null
		ShippingServiceType serviceType
	}
	
	record PaymentInfo 
	{
		PaymentMethod method

		string datePaid

		string? transactionId = null
		string? transactionStatus = null
	}
		
	record OrderLinePrice 
	{
		/** The total price the customer is paying for this line (sum of price, taxes, fess, additional costs, etc.) */
		CurrencyAmount totalPrice
		
		/** The price the customer is paying for this item (without taxes, fees, addtional costs, etc.) */
		CurrencyAmount price 
		
		CurrencyAmount insuranceCost
		CurrencyAmount taxAmount
		CurrencyAmount shippingDicount

	    /** The sum all of the discount that were applied to this order line */
		CurrencyAmount totalDiscountAmaount

		/** A collection of all the discounts that were appled to this order line */		
		array<PromotionalDiscount> allDiscounts
		
		/** A collection of additional costs that were associated with this order line  */
		array<AdditionalCost> additionalCosts
	}

	record SimpleOrderLineData 
	{
		string? orderLineId = null
		string? itemId = null
		string? orderNumber = null
		
		float quantity
		string productSku
		string itemDescription
		
		OrderLinePrice unitPrice

		OrderStatus status
		OrderLinePrice price
			
		datetime? dateCancelled = null
		datetime? dateDelivered = null
		datetime? dateShipped = null
		datetime? dateReturned = null
		datetime? dateInvoiced = null
		
		ShipTo destination
	}
	
	record OrderLineData extends SimpleOrderLineData
	{	
		string? lineMessage = null
		
		boolean? bundle = false
		boolean? expandBundle = false
		boolean? soloShip = false
		boolean? autoShip = false
		boolean? autoSubstitution = false
	}

	record OrderDetails 
	{
		/** Unique identifier that is assigned by the originator of this order once created.*/
		string? orderNumber 
		
		OrderStatus status 
		string dateOrdered 

		/** The total paid by the customer (total of items, fees, taxes, etc.) */ 
		CurrencyAmount grandTotal
		
		/** The grand total minus any non-shipping discounts */
		CurrencyAmount netMerchandiseValue
	
		/** Total of all the items -- without taxes, fees, etc. */
		CurrencyAmount itemPriceTotal

		/** Breakdown of the total of all related fees that influence the price */		
		CurrencyAmount totalInsuranceCost
		CurrencyAmount totalTaxAmount
		CurrencyAmount totalDiscountAmount
		CurrencyAmount totalShippingFees
		array<AdditionalCost> additionalCosts
		
		/** A collection of all the promotional discounts that were applied at the order level */
		array<PromotionalDiscount> discounts
				
		/** The channel where this order originated (ebay, amazon, etc.) */
		string sourceId
		
		/** The id of the group that classifies source (web, print, email, etc.) */
		string sourceGroupId
	}
	
	record SimpleOrder extends OrderDetails
	{
		array<SimpleOrderLineData> orderLines
	}
	
	record OrderData extends NonSensitiveOrderData
	{
		CustomerInfo customer
		Address billingAddress
		
		array<PaymentInfo> paymentMethods
		
		/** if not provided, use ShipTo info the associated OrderLine */
		ShipTo destination
		
		string? purchaseOrder = null
	}
	
	
	record NonSensitiveOrderData extends OrderDetails
	{
		array<OrderLineData> orderLines
		
		/** The marketing source that referred this order */
		string? referralSource = null
	}
	
	record NonSensitiveOrder extends NonSensitiveOrderData{
		string id
	}
	
	record Order extends OrderData 
	{
		string id
	}
	
	record ProcessOrder 
	{
		OrderData order
	}
	
	record ProcessOrderSucceeded
	{
		Order order
	}
	
	record ProcessOrderFailed
	{
		OrderData order
		array<Error> errors
	}
	
	record OrderShipped 
	{
		string orderNumber
		string shipmentId
		array<TrackingDetail>? trackingDetails = null
		string sourceId
	}
	
	record MarketplaceOrderShipped extends OrderShipped
	{
		string accountId
		string? siteCode = null		
	}
	
    record CreateOrder
	{
		OrderData orderData
	}
	
    record CreateMarketplaceOrder extends CreateOrder
	{
		string accountId
		string? siteCode = null
	}
	
	record CreateOrderSucceeded
	{
		string orderNumber
	}
	
	record SalesChannelCreateOrderSucceeded extends CreateOrderSucceeded
	{
		string accountId
		string? siteCode = null
	}
	
	record CreateOrderFailed
	{
		string orderNumber
		array<Error> errors
	}
	
	record SalesChannelCreateOrderFailed extends CreateOrderFailed
	{
		string accountId
		string? siteCode = null
	}
	
	record OrderCreated 
	{
		SimpleOrder simpleOrder
	}
	
	record MarketplaceOrderCreated extends OrderCreated
	{
		string accountId
		string? siteCode = null
	}
	
	record CancelOrder
	{
		string orderNumber
	}
	
	record CancelMarketplaceOrder extends CancelOrder
	{
		string accountId
		string? siteCode = null
	}
	
	record CancelOrderSucceeded extends CancelOrder
	{
	}
	
	record CancelMarketplaceOrderSucceeded extends CancelOrderSucceeded
	{
		string accountId
		string? siteCode = null
	}
	
	record CancelOrderFailed
	{
		string orderNumber
		array<Error> errors
	}
	
	record CancelMarketplaceOrderFailed
	{
		array<string> failedOrderNumbers
		array<Error> errors
	}
	
	record OrderCancelled 
	{
		array<SimpleOrder> cancelledOrders
	}
	
	record MarketplaceOrderCancelled 
	{
		array<Order> cancelledOrders
	}
	
    record SearchOrder{
    	
		datetime? lastModified;
		/**
		 * Restrict the number of items return to this many or less.
		 * When null, it is assumed there is no restriction
		 */
		long? itemsRequested;
		
		/**
		 * Return the results starting from this zero-based index.
		 * When null, items will be returned started from the first item
		 */
		long? startItemIndex;
	}	

	record SearchOrderSucceeded{
		array<Order> orders;	
		SearchOrder search;
	}	
	record SearchNonSensitiveOrderSucceeded{
        array<NonSensitiveOrder> orders;		
		SearchOrder search;
	}
	record SearchOrderFailed{
		SearchOrder search;
		array<Error> errors;
	}

}



