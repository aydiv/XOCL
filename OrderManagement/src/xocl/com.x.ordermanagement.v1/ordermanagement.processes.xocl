/** This file includes the processes that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v1 
{
	import com.x.ordermanagement.v1.*
	import com.x.customer.v1.*
	
	entity Order
    {
    	state New[Created]
    	state Created[Submitted]
    	state Submitted[Cancelled, Shipped]
    	state Shipped[Cancelled]
    	state Cancelled
    }
    
    process ProcessSalesChannelOrder<SalesChannelOrder> 
    {
        description "An order id submitted for processing and is shipped or cancelled"
        
        roles(SalesChannel, OrderProcessor, OrderObserver, CustomerManager)
    
	    workflow 
	    {
	   		// Notify observers that an order was created
	        transaction OrderCreated<SalesChannelOrder>
	        {
	        	roles(SalesChannel, OrderObserver)
	        }
	    	 	
	    	// An order submitter submits an order to an order processor
	        transaction ProcessOrder
	        {
	        	roles(SalesChannel, OrderProcessor)
	        }
	        any{
	        	workflow CustomerUpsert{
	    			roles(OrderProcessor, CustomerManager)
	    		}
	    	}	 
	        one
	        {     
	        	// An order processor updates shipment tracking information for an order
	        	transaction OrderShipped<SalesChannelOrder>
	        	{
	        		roles(OrderProcessor, SalesChannel)
	        	}
        	
	        	do
	        	{
		        	any
		        	{
						// A canceller asks the processer to cancel its order 
						transaction CancelOrder<SalesChannelOrder>
						{
						   	roles(SalesChannel, OrderProcessor)
						}
					}
					
					// The order processor informs observers that an order was cancelled
					transaction OrderCancelled<SalesChannelOrder>
					{
					   	roles(OrderProcessor, OrderObserver)
					}
				}
			}	
		}
    }
}