/** This file includes the processes that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v2 {
	import com.x.ordermanagement.v2.*
	import com.x.customer.v1.*
	
	entity Order {
    	state Created[Submitted]
    	state Submitted[Cancelled, Shipped]
    	state Shipped[Cancelled, Returned]
    	state Cancelled
    	state Returned
    }
    
    // A new process for marketing channels and analytics.  Non-PII only, no customer information.  
    // Search only for now
    process OrderSearch<NonSensitive, MarketplaceOrderSearch> {
    	
    	description "A marketing or analytics provider searches for orders modified since a timestamp"
    	
    	roles (OrderManager, OrderConsumer)
    	
    	workflow {
    		transaction SearchOrder<NonSensitive, MarketplaceOrderSearch> {
    			roles (OrderManager, OrderConsumer)
    		}   
    	}
    }
    
    // Process orders that originate from a sales channel
    process ProcessSalesChannelOrder<MarketplaceOrder> {
    	
        description "An order is submitted for processing and is shipped or cancelled"
        
        roles(SalesChannel, OrderProcessor, OrderObserver, CustomerManager)
    
	    workflow {
   			// Notify observers that an order was created
       	    transaction OrderCreated {
        		roles(SalesChannel, OrderObserver)
       		}
	    	 	
    		// An order submitter submits an order to an order processor
       	 	transaction ProcessOrder<MarketplaceOrder> {
        		roles(SalesChannel, OrderProcessor)
        	}
        	
	        any {
	        	workflow CustomerUpsert {
	    			roles(OrderProcessor, CustomerManager)
	    		}
	    		
	    		transaction ShippingInformationUpdate {
	    			roles(OrderProcessor, SalesChannel)
	    		}
	    		
	    		transaction ShippingInformationUpdate {
	    			roles(SalesChannel, OrderProcessor)
	    		}
	    		
	    		transaction OrderAdjust {
	    			roles(OrderProcessor, OrderObserver)
	    		}
	    	}
	   
	        one {     
	        	// An order processor updates shipment tracking information for an order
	        	transaction OrderShipped<MarketplaceOrder> {
	        		roles(OrderProcessor, SalesChannel)
	        	}
	       
        	
	        	do {
		        	any {
						// A canceller asks the processer to cancel its order 
						transaction CancelOrder<MarketplaceOrder> {
						   	roles(SalesChannel, OrderProcessor)
						}
					}
					
					// The order processor informs observers that an order was cancelled
					transaction OrderCancelled<MarketplaceOrder> {
					   	roles(OrderProcessor, OrderObserver)
					}
				}
			}	
		}
    }
}