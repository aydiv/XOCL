/** This file includes the processes that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v2 {
	import com.x.ordermanagement.v2.*
	import com.x.customer.v1.*
	
	entity Order {
		summary "Specifies the state of the order and the next valid states if any."
		description "Defines the values used to specify the state of the order and the next valid states if any."
		
    	state Submitted[Cancelled, Shipped] "Order has been submitted. The next states are either Cancelled or Shipped."
    	state Shipped[Cancelled, Returned] "Order has shipped. The next states are either Cancelled or Returned."
    	state Cancelled "Order has been Cancelled."
    	state Returned "Order has been returned."
    }
    
     process OrderSearch<NonSensitive, MarketplaceOrderSearch> {
    	
    	summary "Searches for orders based on the search criteria provided."
    	description "A marketing or analytics provider searches for orders based on the search criteria provided."
    	
    	roles {
    		OrderManager "Searches for orders." 
    		OrderConsumer "Submits a request to query for orders."
    		
    	}
    	
    	workflow {
    		    		
    		summary "Searches for orders."
    		description "Searches for orders and returns the results or a failed message."
    		
    		transaction SearchOrder<NonSensitive, MarketplaceOrderSearch> {
    			roles (OrderManager, OrderConsumer)
    		}   
    	}
    }
    
    
    process SubmitShippedOrder<MarketplaceOrder>(Order order) {
    	
    	summary "Submits an order to the processor that has already been shipped."
    	description "Submits an order to the OrderProcessor that has already been shipped." 
    	
    	roles {
    		
    		SalesChannel "Submits an order to the order processor." 
    		OrderProcessor "Receives an order from a sales channel."
    	}
    	
    	workflow {
    		
    		summary "Submits an order, which has already been shipped, to the OrderProcessor."
    		description "Submits an order, which has already been shipped, to the OrderProcessor."
    		
    		transaction SubmitOrder<MarketplaceOrder> {
    			roles (SalesChannel, OrderProcessor)
    		}   
    	}
    }
    
    process ProcessSalesChannelOrder<MarketplaceOrder>(Order order) {
    	
    	summary "Processes an order that originates from a sales channel."
        description "An order is submitted from and sales channel and is processed by making adjustments, changing the status, etc. and notifies observers of the action performed. Note: Use OrderReturn ONLY when all the items in an order are returned at the same time. For all other returns, use PartialOrderReturn. For example, a buyer orders two items. Returns one item and later returns the second item. You would use PartialOrderReturn for both of these returns."
        
        roles {
        	SalesChannel "Submits the order for processing."
        	OrderProcessor "Performs the order processing."
        	OrderObserver "Informed of the processing that happened."
        	CustomerManager "Supplies the details needed for the processing of the order."
        
        }
    
	    workflow {
	    	    		
    		summary "Processes an order."
    		description "Processes an order."
	    	
	        any {
	       	 	transaction ProcessOrder<MarketplaceOrder> {
	        		roles(SalesChannel, OrderProcessor)
	        	}
	        }
        	
	        any {
	        	workflow CustomerUpsert {
	        		    		
    				summary "Adds a customer or updates an existing customer." 
    				description "Adds a new customer or updates the information of an existing customer based on whether the customer exists."
	        		
	    			roles(OrderProcessor, null, null)
	    		}
	    	}
	    	
       	    transaction OrderCreated {
        		roles(SalesChannel, OrderObserver)
       		}
       		
	    	
	    	do (!order[Order.Cancelled] && !order[Order.Shipped] && !order[Order.Returned]) {
	    		any {
	    			noop //TN: Noop added to allow for polling semantic	
		    		transaction ShippingInformationUpdate<MarketplaceOrder> {
		    			roles(OrderProcessor, SalesChannel)
		    		}
		    		
		    		transaction OrderAdjust {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		transaction OrderReturn {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    	
		    		transaction PartialOrderReturn {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		transaction PaymentUpdate<MarketplaceOrder> {
		    			roles(SalesChannel, OrderProcessor)
		    		}
		    		
		        	all {  
			        	// An order processor updates shipment tracking information for an order
			        	transaction OrderShipped<MarketplaceOrder> {
			        		roles(OrderProcessor, SalesChannel)
			        	}
			        	
			        	transaction ObserveOrderShipped<MarketplaceOrder> {
			        		roles(OrderProcessor, OrderObserver)
			        	}
			        }
	        	
		        	any {
			        	do {
							// A canceller asks the processer to cancel its order 
							transaction CancelOrder<MarketplaceOrder> {
							   	roles(SalesChannel, OrderProcessor)
							}
							workflow OrderCancelled<MarketplaceOrder> {
						   		roles(OrderProcessor, OrderObserver)
						   	}
						}
						
						// The order processor informs observers that an order was cancelled
						workflow OrderCancelled<MarketplaceOrder> {
						   	roles(OrderProcessor, OrderObserver)
						}
					}
				}
			}
		}
	}
	process OrderCancelled <MarketplaceOrder> {
		summary ""
		description ""
		
		roles {
         	OrderProcessor "Notification that an order was cancelled."
        	OrderObserver "Receives an order cancelled notification."      
        }
	}
	
	workflow OrderCancelled implements OrderCancelled{
		 transaction OrderCancelled<MarketplaceOrder> {
			 roles(OrderProcessor, OrderObserver)
		 }	
	}
}