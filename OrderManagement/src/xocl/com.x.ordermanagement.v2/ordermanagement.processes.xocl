/** This file includes the processes that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v2 {
	import com.x.ordermanagement.v2.*
	import com.x.customer.v1.*
	
	entity Order {
    	state Submitted[Cancelled, Shipped] "TBD"
    	state Shipped[Cancelled, Returned] "TBD"
    	state Cancelled "TBD"
    	state Returned "TBD"
    }
    
    // A new process for marketing channels and analytics.  Non-PII only, no customer information.  
    // Search only for now
    process OrderSearch<NonSensitive, MarketplaceOrderSearch> {
    	
    	summary "TBD"
    	description "A marketing or analytics provider searches for orders modified since a timestamp"
    	
    	roles {
    		OrderManager "TBD"
    		OrderConsumer "TBD"
    		
    	}
    	
    	workflow {
    		    		
    		summary "TBD"
    		description "TBD"
    		
    		transaction SearchOrder<NonSensitive, MarketplaceOrderSearch> {
    			roles (OrderManager, OrderConsumer)
    		}   
    	}
    }
    
    
    // Submit an order that is in an already shipped state
    process SubmitShippedOrder<MarketplaceOrder>(Order order) {
    	
    	summary "TBD"
    	description "Submit an order to the OrderProcessor that has already been shipped"
    	
    	roles {
    		
    		SalesChannel "TBD"
    		OrderProcessor "TBD"
    	}
    	
    	workflow {
    		
    		summary "TBD"
    		description "TBD"
    		
    		transaction SubmitOrder<MarketplaceOrder> {
    			roles (SalesChannel, OrderProcessor)
    		}   
    	}
    }
    
    // Process orders that originate from a sales channel
    process ProcessSalesChannelOrder<MarketplaceOrder, MarketplacePaymentUpdate>(Order order) {
    	
    	summary "TBD"
        description "An order is submitted for processing and is adjusted, shipped, or cancelled"
        
        roles {
        	SalesChannel "TBD"
        	OrderProcessor "TBD"
        	OrderObserver "TBD"
        	CustomerManager "TBD"
        
        }
    
	    workflow {
	    	    		
    		summary "TBD"
    		description "TBD"
	    	
	    	// A new order may already have arrived at the OrderProcessor
	    	// via a separate flow (SearchOrder, for example). That means the 
	    	// ProcessOrder transaction may not be required to start the workflow.
	        any {
		        // An order submitter submits an order to an order processor
	       	 	transaction ProcessOrder<MarketplaceOrder> {
	        		roles(SalesChannel, OrderProcessor)
	        	}
	        }
        	
	        any {
	        	workflow CustomerUpsert {
	        		    		
    				summary "TBD"
    				description "TBD"
	        		
	    			roles(OrderProcessor, CustomerManager)
	    		}
	    	}
	    	
   			// Notify observers that an order was created
       	    transaction OrderCreated {
        		roles(SalesChannel, OrderObserver)
       		}
       		
	    	
	    	do (!order[Order.Cancelled] && !order[Order.Shipped] && !order[Order.Returned]) {
	    		any {
	    			noop //TN: Noop added to allow for polling semantic	
		    		transaction ShippingInformationUpdate<MarketplaceOrder> {
		    			roles(OrderProcessor, SalesChannel)
		    		}
		    		
		    		transaction OrderAdjust {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		transaction OrderReturn {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    	
		    		transaction PartialOrderReturn {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		transaction PaymentUpdate<MarketplacePaymentUpdate> {
		    			roles(SalesChannel, OrderProcessor)
		    		}
		    		
		        	all {  
			        	// An order processor updates shipment tracking information for an order
			        	transaction OrderShipped<MarketplaceOrder> {
			        		roles(OrderProcessor, SalesChannel)
			        	}
			        	
			        	transaction ObserveOrderShipped<MarketplaceOrder> {
			        		roles(OrderProcessor, OrderObserver)
			        	}
			        }
	        	
		        	any {
			        	do {
							// A canceller asks the processer to cancel its order 
							transaction CancelOrder<MarketplaceOrder> {
							   	roles(SalesChannel, OrderProcessor)
							}
							workflow OrderCancelled<MarketplaceOrder> {
						   		roles(OrderProcessor, OrderObserver)
						   	}
						}
						
						// The order processor informs observers that an order was cancelled
						workflow OrderCancelled<MarketplaceOrder> {
						   	roles(OrderProcessor, OrderObserver)
						}
					}
				}
			}
		}
	}
	process OrderCancelled <MarketplaceOrder> {
		roles {
        	OrderProcessor "TBD"
        	OrderObserver "TBD"
        
        }
	}
	
	workflow OrderCancelled implements OrderCancelled{
		 transaction OrderCancelled<MarketplaceOrder> {
			 roles(OrderProcessor, OrderObserver)
		 }	
	}
}