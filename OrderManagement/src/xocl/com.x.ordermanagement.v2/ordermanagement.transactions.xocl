/** This file includes the transactions that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v2 {
	import com.x.ordermanagement.v2.*
	
	// Tell an order processor to process an order 
	transaction ProcessOrder<MarketplaceOrder> response {
		sender {
			message ProcessOrder {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
			message<MarketplaceOrder> ProcessMarketplaceOrder {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
		}
		
		receiver {
			success ProcessOrderSucceeded {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
			failure ProcessOrderFailed{
				timeouts(receipt=30s)
			}
		}
	}
	
	// Update the shipping tracking information for an order
	transaction OrderShipped<MarketplaceOrder>(Order order) notify {
		preconditions(order[Order.Submitted])
		
		sender
		{
			message OrderShipped {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            message<MarketplaceOrder> MarketplaceOrderShipped {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }            
		}
		
		postconditions {
			success(order[Order.Shipped])
		}
	}
	
	// Notify observers that the order has shipped
	transaction ObserveOrderShipped<MarketplaceOrder> inform {
		sender {
			message ObserveOrderShipped 
            message<MarketplaceOrder> ObserveMarketplaceOrderShipped 
		}		
	}
    
    // Inform observers that an order was created
    transaction OrderCreated inform {
        sender {
        	message OrderCreated
        }
    }
    
    // Cancel the content of an order
	transaction CancelOrder<MarketplaceOrder>(Order order) response {
		preconditions(order[Order.Submitted])
		
        sender {
        	message CancelOrder {
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        	message<MarketplaceOrder> CancelMarketplaceOrder {
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        }
        receiver {
        	success CancelOrderSucceeded {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }
                        
        	success<MarketplaceOrder> CancelMarketplaceOrderSucceeded {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
            }            
            
            failure CancelOrderFailed{
            	timeouts(receipt=30s)
            }
            failure<MarketplaceOrder> CancelMarketplaceOrderFailed{
            	timeouts(receipt=30s)
            }
        }
		postconditions {
			success(order[Order.Cancelled])
		}
    }
    
    // Inform observers that an order was cancelled
    transaction OrderCancelled<MarketplaceOrder> inform {
        sender {
        	message OrderCancelled
        	message<MarketplaceOrder> MarketplaceOrderCancelled
        }
    }
      
    transaction SearchOrder<NonSensitive, MarketplaceOrderSearch> query {
        sender {
        	message SearchOrder {
        		 timeouts(response=30s)     		
        	}
        	message <MarketplaceOrderSearch> MarketplaceSearchOrder {
        		 timeouts(response=30s)     		        		
        	}
        }
        receiver {
        	success SearchOrderSucceeded   
        	success<MarketplaceOrderSearch> MarketplaceSearchOrderSucceeded   
        	success<NonSensitive> SearchNonSensitiveOrderSucceeded           
                    	        
            failure SearchOrderFailed
        	failure<MarketplaceOrderSearch> MarketplaceSearchOrderFailed   
        } 
    }
    
    transaction ShippingInformationUpdate<MarketplaceOrder> notify {
        sender {
        	message ShippingInformationUpdate {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
        	}
        	message <MarketplaceOrder> MarketplaceShippingInformationUpdate {
            	timeouts(receipt=30s, validation=3m)
            	retries=3
        	}
        }
    }
    
    transaction OrderReturn(Order order) inform {
    	sender {
    		message OrderReturn
    	}
    	
    	postconditions {
    		success(order[Order.Returned])
    	}
    }
    
    transaction PartialOrderReturn(Order order) inform {
    	sender {
    		message PartialOrderReturn
    	}
    	
    	postconditions {
    		success(order[Order.Returned])
    	}
    }
    
    transaction OrderAdjust inform {
    	sender {
    		message OrderAdjust
    	}
    }
    
    transaction PaymentUpdate response {
    	sender {
    		message PaymentUpdate {
    			timeouts(response=30s)    		
        	}
        }
        receiver {
        	success PaymentUpdateSucceeded                       	        
            failure PaymentUpdateFailed
        } 
    }
}