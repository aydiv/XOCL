/** This file includes the messages that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v2 {
	
	import com.x.ordermanagement.v2.* 
	import com.x.core.v1.*
	
	enum TaxabilityType {
		TAXABLE,
		NONTAXABLE,
		EXEMPT,
		DEFERRED
	}
	
	enum OrderStatus {
		NEW,
		ON_HOLD,
		BACKORDERED,
		PENDING_PAYMENT,
		READY_TO_SHIP,
		PARTIALLY_SHIPPED,
		SHIPPED,
		PROCESSING_RETURN,
		EXCHANGED,
		CANCELLED,
		COMPLETED,
		PAID
	}
	
	enum ShippingServiceType {
		MERCHANT_SHIPPED,
		DROP_SHIP,
		SHIPPING_SERVICE,
		WILL_CALL
	}
	
	enum PromotionDiscountType {
		STOREWIDE_SALE,
		SHIPPING_DISCOUNT,
		PRODUCT_DISCOUNT,
		OTHER
	}
	
	enum PaymentStatus {
		AUTHORIZED,
		PAID,
		NOT_AUTHORIZED,
		PARTIAL,
		NONE
	}	

	record GiftTag {
		string? from
		string? to
		string giftMessage
	}
	
	record CustomerInfo confidential {
		union{guid, EntityId} id;   //id is created by the system that creates the record.	
		Name name
		Email? email
		Phone? phone
	}
	
	record PromotionalDiscount {
		string code
		string promoDescription
		PromotionDiscountType type
		CurrencyAmount amount
	}
	
	record ShipTo confidential {
		Name name
		Address address
		GiftTag giftTag
	}
	
	record Shipping {
		ShippingServiceType serviceType
		string? carrierCode
		
		/** Next day, ground, etc. */
		string shippingMethod
		
		DateRange deliveryWindow
		DateRange shippingWindow
		
		string? shippingMessage
	}
	
	record AdditionalCost {
		string costDescription
		CurrencyAmount amount
	}
	
	record TrackingDetail {
		array<string> trackingNumbers
		string? carrier
		string? service
		ShippingServiceType serviceType
	}
	
	record ShippingInformationUpdate extends TrackingDetail {
		string? orderNumber
		string? orderLineId
	}
	
	record ShippingInformationUpdateSucceeded {
		string? orderNumber
		string? orderLineId
	}
	
	record ShippingInformationUpdateFailed {
		string? orderNumber
		string? orderLineId
		array<Error> errors
	}
	
	record ShippingInformationUpdate extends TrackingDetail {
		string? orderNumber
		string? orderLineId
	}
	
	record PaymentInfo {
		PaymentMethod method

		string datePaid

		string? transactionId
		string? transactionStatus
		
		CurrencyAmount? processingFee
		PaymentStatus paymentStatus = NONE
	}
	
	record Tax {
		TaxabilityType taxability;
		string taxType;
		double effectiveRate;
		CurrencyAmount taxesCharged;
	}
	
		
	record OrderLinePrice {
		/** The total price the customer is paying for this line (sum of price, taxes, fees, additional costs, etc.) */
		CurrencyAmount totalPrice
		
		/** The price the customer is paying for this item (without taxes, fees, addtional costs, etc.) */
		CurrencyAmount price 
		
		CurrencyAmount insuranceCost
		
		/** The tax charges for this item with addtional data about the nature of the tax */
		Tax taxAmount
		
		CurrencyAmount shippingDiscount

	    /** The sum all of the discount that were applied to this order line */
		CurrencyAmount totalDiscountAmount

		/** A collection of all the discounts that were appled to this order line */		
		array<PromotionalDiscount> allDiscounts
		
		/** A collection of additional costs that were associated with this order line  */
		array<AdditionalCost> additionalCosts
	}

	record SimpleOrderLineData {
		string? orderLineId
		string? itemId
		string? orderNumber
		
		float quantity
		string productSku
		string itemDescription
		
		/** Optionall provided with each item, overriding order */
		Shipping? shipping
		
		OrderLinePrice unitPrice

		OrderStatus status
		
		/** This is quantity * unit price */
		OrderLinePrice price
			
		datetime? dateCancelled
		datetime? dateDelivered
		datetime? dateShipped
		datetime? dateReturned
		datetime? dateInvoiced
		
		ShipTo destination
	}
	
	record OrderLineData extends SimpleOrderLineData {	
		string? lineMessage
		
		boolean? bundle = false
		boolean? expandBundle = false
		boolean? soloShip = false
		boolean? autoShip = false
		boolean? autoSubstitution = false
	}

	record OrderDetails {
			    
		/** Unique identifier that is assigned by the originator of this order once created.*/
		string? orderNumber 
		
		OrderStatus status 
		string dateOrdered 

		/** The total paid by the customer (total of items, fees, taxes, etc.) */ 
		CurrencyAmount grandTotal
		
		/** The grand total minus any non-shipping discounts */
		CurrencyAmount netMerchandiseValue
	
		/** Total of all the items -- without taxes, fees, etc. */
		CurrencyAmount itemPriceTotal

		/** Breakdown of the total of all related fees that influence the price */		
		CurrencyAmount totalInsuranceCost
		CurrencyAmount totalTaxAmount
		CurrencyAmount totalDiscountAmount
		CurrencyAmount totalShippingFees
		array<AdditionalCost> additionalCosts
		
		/** A collection of all the promotional discounts that were applied at the order level */
		array<PromotionalDiscount> discounts
				
		/** The channel where this order originated (ebay, amazon, etc.) */
		string sourceId
		
		/** The id of the group that classifies source (web, print, email, etc.) */
		string sourceGroupId
		
		/** An optional collection of related orders numbers */
		array<string>? relatedOrderNumbers
		
		/** Default shipping for entire order that can be overridden by each order item */
		Shipping? shipping
		
	}
	
	record SimpleOrder extends OrderDetails {
		array<SimpleOrderLineData> orderLines
	}
	
	record NonSensitiveOrderData extends OrderDetails {
		array<OrderLineData> orderLines
		
		/** The marketing source that referred this order */
		string? referralSource
	}
	
	record OrderData extends NonSensitiveOrderData {
		CustomerInfo customer
		Address billingAddress
		
		array<PaymentInfo> paymentMethods
		
		/** if not provided, use ShipTo in the associated OrderLine */
		ShipTo destination
		
		string? purchaseOrder
	}
	
	record NonSensitiveOrder extends NonSensitiveOrderData {
		guid id
	}
	
	record Order extends OrderData {
		guid id
	}
	
	record ProcessOrder {
		OrderData order
	}
	
	record ProcessMarketplaceOrder extends ProcessOrder {
		string? accountId
		string? siteCode
	}
	
	record ProcessOrderSucceeded {
		Order order
	}
	
	record ProcessOrderFailed {
		OrderData order
		array<Error> errors
	}
	
	record OrderShipped {
		string orderNumber
		string shipmentId
		array<TrackingDetail>? trackingDetails
		string sourceId
	}
	
	record MarketplaceOrderShipped extends OrderShipped {
		string accountId
		string? siteCode
	}
	
    record CreateOrder {
		OrderData orderData
	}
	
    record CreateMarketplaceOrder extends CreateOrder {
		string accountId
		string? siteCode
	}
	
	record CreateOrderSucceeded {
		string orderNumber
	}
	
	record SalesChannelCreateOrderSucceeded extends CreateOrderSucceeded {
		string accountId
		string? siteCode
	}
	
	record CreateOrderFailed {
		string orderNumber
		array<Error> errors
	}
	
	record SalesChannelCreateOrderFailed extends CreateOrderFailed {
		string accountId
		string? siteCode
	}
	
	record OrderCreated {
		SimpleOrder simpleOrder
	}
	
	record MarketplaceOrderCreated extends OrderCreated {
		string accountId
		string? siteCode
	}
	
	record CancelOrder {
		array<string> orderNumbers
	}
	
	record CancelMarketplaceOrder extends CancelOrder {
		string accountId
		string? siteCode
	}
	
	record CancelOrderSucceeded extends CancelOrder {
	}
	
	record CancelMarketplaceOrderSucceeded extends CancelOrderSucceeded {
		string accountId
		string? siteCode
	}
	
	record CancelOrderFailed {
		string orderNumber
		array<Error> errors
	}
	
	record CancelMarketplaceOrderFailed {
		array<string> failedOrderNumbers
		array<Error> errors
	}
	
	record OrderCancelled {
		array<SimpleOrder> cancelledOrders
	}
	
	record MarketplaceOrderCancelled {
		array<Order> cancelledOrders
	}
	
    record SearchOrder {
    	Query _AVDL_query
    	
		datetime? lastModified
		/**
		 * Restrict the number of items return to this many or less.
		 * When null, it is assumed there is no restriction
		 */
		long? itemsRequested
		
		/**
		 * Return the results starting from this zero-based index.
		 * When null, items will be returned started from the first item
		 */
		long? startItemIndex
	}
	
	record MarketplaceSearchOrder extends SearchOrder {
		string? siteCode
		string? sellerAccountId
	}

	record SearchOrderSucceeded {
		array<Order> orders

		/**
		 * The total number of items found by the data provider.
		 * This field will be filled in by the result provider when supported.
		 * Requester should not fill this out.
		 */
		datetime? modifiedSince
		long totalItemsFound
		long? itemsRequested
		long? startItemIndex
	}
	
	record SearchNonSensitiveOrderSucceeded {
        array<NonSensitiveOrder> orders
        	
		/**
		 * The total number of items found by the data provider.
		 * This field will be filled in by the result provider when supported.
		 * Requester should not fill this out.
		 */
		 datetime? modifiedSince
		 long totalItemsFound
		 long? itemsRequested
		 long? startItemIndex
	}
	
	record SearchOrderFailed {
		SearchOrder search
		array<Error> errors
	}

}



